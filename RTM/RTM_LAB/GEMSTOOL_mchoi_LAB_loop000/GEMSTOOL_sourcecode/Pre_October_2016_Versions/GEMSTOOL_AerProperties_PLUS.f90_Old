Module GEMSTOOL_AerProperties_Plus_m

!  Use Type structures (GEMSTOOL)

   use GEMSTOOL_Input_Types_m

!  Use Loading routines
!  --------------------

   use GEMSTOOL_aerload_routines_m

!  Use Mie code
!  ------------

!  parameters

   use RTSMie_parameters_m

!  Single call

   use RTSMie_sourcecode_m
   use RTSMie_sourcecode_plus_m

!  Bimodal call

   use RTSMie_master_bimodal_m
   use RTSMie_master_bimodal_PLUS_m

!  Use Tmatrix code
!  ----------------

!  parameters

   use tmat_parameters

!  Single call

   use tmat_master_m
   use tmat_master_PLUS_m

!  Bimodal call

   use tmat_master_bimodal_m
   use tmat_master_bimodal_PLUS_m

!  All routines are public

private
public :: GEMSTOOL_AER_PROPERTIES_PLUS, GEMSTOOL_AERWFS_BOOKKEEP

contains

subroutine GEMSTOOL_AERWFS_BOOKKEEP &
      ( maxaerwfs, GEMSTOOL_INPUTS,                & ! Inputs
        n_AerBulk_Total_wfs, n_AerBulk_Group_wfs,  & ! OUTPUT, aerosol Jacobian Bookkeeping
        AerBulk_Mask_wfs, AerBulk_pars )             ! OUTPUT, aerosol Jacobian Bookkeeping

!  =============================================================================
!                        AEROSOL JACOBIAN CREATION
!  =============================================================================

!  aerosol Loading:
!    Loading Jacobians
!       Cases 1-3 : dloading_Dtau      = derivative of profile w.r.t the total aerosol optical depth at wavelength w0
!       Case 2    : dloading_Dpars(1)  = derivative of profile w.r.t the relaxation parameter (Exponential)
!       Case 3    : dloading_Dpars(1)  = derivative of profile w.r.t the GDF Peak height
!       Case 3    : dloading_Dpars(2)  = derivative of profile w.r.t the GDF Half Width 

!  Generation of Aerosol optical properties
!     1. Call to the Linearized Mie/Tmatrix program
!     2. Convert Mie/Tmatrix output (Microsopic) to IOP output (macroscopic) 

!  Here is a breakdown of the aerosol weighting functions
!  ------------------------------------------------------

!  There are 5 groups, according to the input control

!  Group 1.  do_AerBulk_LoadPars_Jacobians --> w.r.t. Profile loading parameters
!           # 1  Total optical depth of aerosol (aerau_input_w0) at reference wavelength w0
!           # 2  EITHER Relaxation parameter in EXP loading; OR peakheight parameter in GDF loading
!           # 3  halfwidth parameter in GDF Loading

!  Group 2.  do_AerBulk_RefIndex_Jacobians --> w.r.t. Refractive Index components
!           # 1  Real part of the refractive index for Mode-1
!           # 2  Imag part of the refractive index for Mode-1
!           # 3  Real part of the refractive index for Mode-2 (if present)
!           # 4  Imag part of the refractive index for Mode-2 (if present)

!  Group 3.  do_AerBulk_ShapeFac_Jacobians --> w.r.t. Shape Factor (T-matrix only)
!           # 1  Shape Factor for Mode-1
!           # 2  Shape Factor for Mode-2 (if present)

!  Group 4.  do_AerBulk_SizeDist_Jacobians --> w.r.t. Size Distribution Parameters
!           # 1  LN Mode radius  of Particle Size Distribution for Mode-1
!           # 2  LN Std. dev.    of Particle Size Distribution for Mode-1
!           # 3  3rd parameter   of Particle Size Distribution for Mode-1 (if present)
!           # 4  LN Mode radius  of Particle Size Distribution for Mode-2 (if present)
!           # 5  LN Std. dev.    of Particle Size Distribution for Mode-2 (if present)
!           # 6  3rd parameter   of Particle Size Distribution for Mode-2 (if present)

!  Group 5.  do_AerBulk_BmodFrac_Jacobian --> w.r.t.Bimodal fraction
!           # 1  Bimodal fraction for PSDs                                (if present)

!  Total possible number of Jacobians = 16 in all 5 Groups

!  ORDER OF APPEARANCE for A BIMODAL TMATRIX with both PSDs having 3 parameters, with GDF LOADING
!  ----------------------------------------------------------------------------------------------

!   WF #   GROUP  PSD MODE #   Jacobian parameter

!     1      2       1         Real part of the refractive index for Mode-1
!     2      2       1         Imag part of the refractive index for Mode-1
!     3      3       1         Shape Factor for Mode-1
!     4      4       1         Parameter 1 of Particle Size Distribution for Mode-1
!     5      4       1         Parameter 2 of Particle Size Distribution for Mode-1
!     6      4       1         Parameter 3 of Particle Size Distribution for Mode-1
!     7      2       2         Real part of the refractive index for Mode-2
!     8      2       2         Imag part of the refractive index for Mode-2
!     9      3       2         Shape Factor for Mode-2
!     10     4       2         Parameter 1 of Particle Size Distribution for Mode-2
!     11     4       2         Parameter 2 of Particle Size Distribution for Mode-2
!     12     4       2         Parameter 3 of Particle Size Distribution for Mode-2
!     13     5       -         Bimodal fraction for PSDs
!     14     1       -         Total optical depth of aerosol (aerau_input_w0) at reference wavelength w0
!     15     1       -         Peak Height parameter in GDF loading
!     16     1       -         Half Width  parameter in GDF Loading

!  ORDER OF APPEARANCE for A BIMODAL MIE Aerosol with both PSDs having 2 parameters, with GDF LOADING
!  --------------------------------------------------------------------------------------------------

!   WF #   GROUP  PSD MODE #   Jacobian parameter

!     1      2       1         Real part of the refractive index for Mode-1
!     2      2       1         Imag part of the refractive index for Mode-1
!     3      4       1         Parameter 1 of Particle Size Distribution for Mode-1 e.g. Log-Normal Mode Radius
!     4      4       1         Parameter 2 of Particle Size Distribution for Mode-1 e.g. Log-Normal Standard Deviation
!     5      2       2         Real part of the refractive index for Mode-2
!     6      2       2         Imag part of the refractive index for Mode-2
!     7      4       2         Parameter 1 of Particle Size Distribution for Mode-2 e.g. Log-Normal Mode Radius
!     8      4       2         Parameter 2 of Particle Size Distribution for Mode-2 e.g. Log-Normal Standard Deviation
!     9      5       -         Bimodal fraction for PSDs
!     10     1       -         Total optical depth of aerosol (aerau_input_w0) at reference wavelength w0
!     11     1       -         Peak Height parameter in GDF loading
!     12     1       -         Half Width  parameter in GDF Loading

   implicit none

!  Precision

   integer, parameter :: fpk = SELECTED_REAL_KIND(15)
  
!  Input variables
!  ---------------

!  External Dimensioning

   integer, INTENT (IN) :: maxaerwfs

!  Type Structure inputs

   TYPE(GEMSTOOL_Config_Inputs) :: GEMSTOOL_INPUTS

!  output
!  ======

!  General output for  Bookkeeping
!    Total number of aerosol weighting functions = n_AerBulk_Total_wfs
!    Group number of aerosol weighting functions = n_AerBulk_Group_wfs(5)
!    Total collection of aerosol parameters      = AerBulk_pars

   INTEGER         , INTENT (OUT)   :: n_AerBulk_Total_wfs, n_AerBulk_Group_wfs(5), AerBulk_Mask_wfs(maxaerwfs)
   REAL    (fpk)   , INTENT (OUT)   :: AerBulk_pars(maxaerwfs)

!  Local variables
!  ===============

!  linearization w.r.t refractive index components

   logical    :: Do_LinearRef

!  linearization w.r.t shape factor (T-matrix only)

   logical    :: Do_LinearEps

!  Linearization for PSD parameters

   logical    :: Do_LinearPSD

!  Lienarization for Loading parameters

   logical     :: do_LinearLoad

!  Lienarization for Bimodal Fraction

   logical     :: do_LinearBmf

!  Local mask

   integer :: distpars_mask(9), npsd(2)
   data distpars_mask / 2,2,3,2,3,3,3,3,0 /

!  Help Variables

   logical      :: do_bimodal
   integer      :: m, q, qm, qm1, qm2, qmt, kd, n_Aer_wfs_1, n_Aer_wfs_2 

!  Local control

   logical            :: do_aer_Jacobians

!  Initialize Aerosol Jacobian Bookkeeping

   n_AerBulk_Total_Wfs = 0
   n_AerBulk_Group_Wfs = 0
   AerBulk_Mask_Wfs    = 0
   AerBulk_pars        = 0.0d0

!  Set local Mie/Tmatrix Linearization variables, for the 5 input GROUPS

   do_LinearLoad = GEMSTOOL_INPUTS%LinControl%do_AerBulk_LoadPars_Jacobians  !!CHECK!!Y.Jung
   do_LinearRef  = GEMSTOOL_INPUTS%LinControl%do_AerBulk_RefIndex_Jacobians
   do_LinearPSD  = GEMSTOOL_INPUTS%LinControl%do_AerBulk_SizeDist_Jacobians
   do_LinearEps  = GEMSTOOL_INPUTS%Atmosph%do_Tmat_aerosols .and. &
                   GEMSTOOL_INPUTS%LinControl%do_AerBulk_ShapeFac_Jacobians
   do_LinearBmf  = GEMSTOOL_INPUTS%MieTmat%do_bimodal       .and. &
                   GEMSTOOL_INPUTS%LinControl%do_AerBulk_BmodFrac_Jacobian

!  overall Jacobian flag

   do_aer_Jacobians = do_LinearLoad.or.do_LinearRef.or.do_LinearPSD.or.do_LinearEps.or.do_LinearBmf

!  Proxy bimodal flag

   do_bimodal = GEMSTOOL_INPUTS%MieTmat%do_bimodal

!@@@@@@@@@@@@@@@@@@@@@@@@ START JACOBIAN BOOKKEEPING @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

!  No bookkeeping if no WFs

   if ( .not. do_aer_Jacobians ) go to 433

!  Set up aerosol parameters and total number of aerosol WFs, First aerosol mode

   npsd(1) = distpars_mask(GEMSTOOL_INPUTS%MieTmat%PSDIndex(1))
   m = 0
   if ( do_LinearRef ) then
      AerBulk_pars(1) = GEMSTOOL_INPUTS%MieTmat%nreal(1) ; AerBulk_pars(2) = GEMSTOOL_INPUTS%MieTmat%nimag(1)
      AerBulk_Mask_wfs(1:2) = 2 ;  n_AerBulk_Group_wfs(2) = n_AerBulk_Group_wfs(2) + 2 ; m = m + 2
   endif
   if ( do_LinearEps ) then
       AerBulk_pars(3) = GEMSTOOL_INPUTS%MieTmat%Tmat_eps(1)
       AerBulk_Mask_wfs(3) = 3 ; n_AerBulk_Group_wfs(3) = n_AerBulk_Group_wfs(3) + 1 ; m = m + 1
   endif
   if ( do_LinearPSD ) then
      do kd = 1, npsd(1)
         m = m + 1 ; AerBulk_pars(m) = GEMSTOOL_INPUTS%MieTmat%PSDpars(kd,1)
         AerBulk_Mask_wfs(m) = 4 ; n_AerBulk_Group_wfs(4) = n_AerBulk_Group_wfs(4) + 1 
      end do
   endif
   n_Aer_wfs_1 = m

!  Set up aerosol parameters and total number of aerosol WFs, Second aerosol mode

   if ( do_bimodal ) then
      npsd(2) = distpars_mask(GEMSTOOL_INPUTS%MieTmat%PSDIndex(2))
      m = n_Aer_wfs_1
      if ( do_LinearRef ) then
         AerBulk_pars(m+1) = GEMSTOOL_INPUTS%MieTmat%nreal(2) ; AerBulk_pars(m+2) = GEMSTOOL_INPUTS%MieTmat%nimag(2)
         AerBulk_Mask_wfs(m+1:m+2) = 2 ;  n_AerBulk_Group_wfs(2) = n_AerBulk_Group_wfs(2) + 2  ; m = m + 2  
      endif
      if ( do_LinearEps ) then
          AerBulk_pars(m+1) = GEMSTOOL_INPUTS%MieTmat%Tmat_eps(2)
          AerBulk_Mask_wfs(m+1) = 3 ; n_AerBulk_Group_wfs(3) = n_AerBulk_Group_wfs(3) + 1  ; m = m + 1
      endif
      if ( do_LinearPSD ) then
         do kd = 1, npsd(2)
            m = m + 1 ; AerBulk_pars(m) = GEMSTOOL_INPUTS%MieTmat%PSDpars(kd,2)
            AerBulk_Mask_wfs(m) = 4 ; n_AerBulk_Group_wfs(4) = n_AerBulk_Group_wfs(4) + 1 
         end do
      endif
      n_Aer_wfs_2 = m - n_Aer_wfs_1
      if ( do_LinearBmf ) then
         AerBulk_pars(m+1)     = GEMSTOOL_INPUTS%MieTmat%bimodal_fraction
         AerBulk_Mask_wfs(m+1) = 5 ; n_AerBulk_Group_wfs(5) = n_AerBulk_Group_wfs(5) + 1
      endif 
   endif

!  Total number of WFs from the Mie/Tmatrix parts

    qm1 = n_Aer_wfs_1
    if ( do_bimodal )                   qm1 = qm1 + n_Aer_wfs_2
    if ( do_bimodal.and.do_LinearBmf )  qm1 = qm1 + 1

!  Add WFs for the loading
!    Total loading + relaxation for the Exponential profile
!    Total loading + peak height + half width for the GDF profile
!    Total loading only for the Uniform profile.

   if ( do_LinearLoad ) then
      if ( GEMSTOOL_INPUTS%AerLoad%loading_case .eq. 2) then
         qmt = qm1 + 2
      else if ( GEMSTOOL_INPUTS%AerLoad%loading_case .eq. 3 ) then
         qmt = qm1 + 3
      else
         qmt = qm1 + 1
      endif
   else
      qmt = qm1
   endif

!  total number of weighing functions

   n_AerBulk_Total_Wfs = qmt

!  Add 1 or 2-3 more parameters for loading 

   qm2 = qm1 + 1
   AerBulk_pars(qm2) = GEMSTOOL_INPUTS%AerLoad%aertau_input_w0
   AerBulk_Mask_wfs(qm2) = 1 ; n_AerBulk_Group_wfs(1) = 1 

   if ( GEMSTOOL_INPUTS%AerLoad%loading_case .eq. 2 ) then
      AerBulk_pars(qmt) = GEMSTOOL_INPUTS%AerLoad%exploading_relaxation
      AerBulk_Mask_wfs(qmt) = 1   ; n_AerBulk_Group_wfs(1) = n_AerBulk_Group_wfs(1) + 1 
   else if ( GEMSTOOL_INPUTS%AerLoad%loading_case .eq. 3 ) then
      AerBulk_pars(qm2+1) = GEMSTOOL_INPUTS%AerLoad%gdfloading_peakheight
      AerBulk_pars(qmt)   = GEMSTOOL_INPUTS%AerLoad%gdfloading_halfwidth
      AerBulk_Mask_wfs(qm2+1) = 1  ; AerBulk_Mask_wfs(qmt) = 1 ; n_AerBulk_Group_wfs(1) = n_AerBulk_Group_wfs(1) + 2
   endif

!  Continuation point for skipping Jacobian bookkeeping

433 continue

!@@@@@@@@@@@@@@@@@@@@@@@@ END JACOBIAN BOOKKEEPING @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

   return
end subroutine GEMSTOOL_AERWFS_BOOKKEEP

!

subroutine GEMSTOOL_AER_PROPERTIES_PLUS &
      ( maxlayers, maxwav, maxaermoms, maxaerwfs, interpolate_aerosols, do_wavnums, & ! Dimensions
        nlayers, nmuller, nwav, wav, height_grid, GEMSTOOL_INPUTS, momsize_cutoff,  & ! Inputs
        n_AerBulk_Total_wfs, n_AerBulk_Group_wfs, AerBulk_pars,                     & ! Inputs, aerosol Jacobian Bookkeeping
        aerlayerflags, Loading, Dloading_Dtau, Dloading_Dpars,                      & ! OUTPUT, aerosol Loading
        n_scatmoms, aertau_unscaled, aod_scaling, aerosol_distchars,                & ! OUTPUT, aerosol optical properties
        aerosol_deltau, aerosol_ssalbs, aerosol_scatmoms,                           & ! OUTPUT, aerosol optical properties
        L_aertau_unscaled, L_aod_scaling, L_aerosol_deltau,                         & ! OUTPUT, aerosol Linearized OPs
        L_aerosol_ssalbs, L_aerosol_scatmoms,                                       & ! OUTPUT, aerosol Linearized OPs
        fail1, fail2, Message_Loading, Messages_Optical )                             ! Exception handling

!  =============================================================================
!                        AEROSOL JACOBIAN CREATION
!  =============================================================================

!  aerosol Loading:
!    Loading = optical depth profile
!    Loading Jacobians
!       Cases 1-3 : dloading_Dtau      = derivative of profile w.r.t the total aerosol optical depth at wavelength w0
!       Case 2    : dloading_Dpars(1)  = derivative of profile w.r.t the relaxation parameter (Exponential)
!       Case 3    : dloading_Dpars(1)  = derivative of profile w.r.t the GDF Peak height
!       Case 3    : dloading_Dpars(2)  = derivative of profile w.r.t the GDF Half Width 

!  Generation of Aerosol optical properties
!     1. Call to the Linearized Mie/Tmatrix program
!     2. Convert Mie/Tmatrix output (Microsopic) to IOP output (macroscopic) 

!  Here is a breakdown of the aerosol weighting functions
!  ------------------------------------------------------

!  There are 5 groups, according to the input control

!  Group 1.  do_AerBulk_LoadPars_Jacobians --> w.r.t. Profile loading parameters
!           # 1  Total optical depth of aerosol (aerau_input_w0) at reference wavelength w0
!           # 2  EITHER Relaxation parameter in EXP loading; OR peakheight parameter in GDF loading
!           # 3  halfwidth parameter in GDF Loading

!  Group 2.  do_AerBulk_RefIndex_Jacobians --> w.r.t. Refractive Index components
!           # 1  Real part of the refractive index for Mode-1
!           # 2  Imag part of the refractive index for Mode-1
!           # 3  Real part of the refractive index for Mode-2 (if present)
!           # 4  Imag part of the refractive index for Mode-2 (if present)

!  Group 3.  do_AerBulk_ShapeFac_Jacobians --> w.r.t. Shape Factor (T-matrix only)
!           # 1  Shape Factor for Mode-1
!           # 2  Shape Factor for Mode-2 (if present)

!  Group 4.  do_AerBulk_SizeDist_Jacobians --> w.r.t. Size Distribution Parameters
!           # 1  LN Mode radius  of Particle Size Distribution for Mode-1
!           # 2  LN Std. dev.    of Particle Size Distribution for Mode-1
!           # 3  3rd parameter   of Particle Size Distribution for Mode-1 (if present)
!           # 4  LN Mode radius  of Particle Size Distribution for Mode-2 (if present)
!           # 5  LN Std. dev.    of Particle Size Distribution for Mode-2 (if present)
!           # 6  3rd parameter   of Particle Size Distribution for Mode-2 (if present)

!  Group 5.  do_AerBulk_BmodFrac_Jacobian --> w.r.t.Bimodal fraction
!           # 1  Bimodal fraction for PSDs                                (if present)

!  Total possible number of Jacobians = 16 in all 4 Groups

!  ORDER OF APPEARANCE for A BIMODAL TMATRIX with both PSDs having 3 parameters, with GDF LOADING
!  ----------------------------------------------------------------------------------------------

!   WF #   GROUP  PSD MODE #   Jacobian parameter

!     1      2       1         Real part of the refractive index for Mode-1
!     2      2       1         Imag part of the refractive index for Mode-1
!     3      3       1         Shape Factor for Mode-1
!     4      4       1         Parameter 1 of Particle Size Distribution for Mode-1
!     5      4       1         Parameter 2 of Particle Size Distribution for Mode-1
!     6      4       1         Parameter 3 of Particle Size Distribution for Mode-1
!     7      2       2         Real part of the refractive index for Mode-2
!     8      2       2         Imag part of the refractive index for Mode-2
!     9      3       2         Shape Factor for Mode-2
!     10     4       2         Parameter 1 of Particle Size Distribution for Mode-2
!     11     4       2         Parameter 2 of Particle Size Distribution for Mode-2
!     12     4       2         Parameter 3 of Particle Size Distribution for Mode-2
!     13     5       -         Bimodal fraction for PSDs
!     14     1       -         Total optical depth of aerosol (aerau_input_w0) at reference wavelength w0
!     15     1       -         Peak Height parameter in GDF loading
!     16     1       -         Half Width  parameter in GDF Loading

!  ORDER OF APPEARANCE for A BIMODAL MIE Aerosol with both PSDs having 2 parameters, with GDF LOADING
!  --------------------------------------------------------------------------------------------------

!   WF #   GROUP  PSD MODE #   Jacobian parameter

!     1      2       1         Real part of the refractive index for Mode-1
!     2      2       1         Imag part of the refractive index for Mode-1
!     3      4       1         Parameter 1 of Particle Size Distribution for Mode-1 e.g. Log-Normal Mode Radius
!     4      4       1         Parameter 2 of Particle Size Distribution for Mode-1 e.g. Log-Normal Standard Deviation
!     5      2       2         Real part of the refractive index for Mode-2
!     6      2       2         Imag part of the refractive index for Mode-2
!     7      4       2         Parameter 1 of Particle Size Distribution for Mode-2 e.g. Log-Normal Mode Radius
!     8      4       2         Parameter 2 of Particle Size Distribution for Mode-2 e.g. Log-Normal Standard Deviation
!     9      5       -         Bimodal fraction for PSDs
!     10     1       -         Total optical depth of aerosol (aerau_input_w0) at reference wavelength w0
!     11     1       -         Peak Height parameter in GDF loading
!     12     1       -         Half Width  parameter in GDF Loading

   implicit none

!  Precision

   integer, parameter :: fpk = SELECTED_REAL_KIND(15)
  
!  Input variables
!  ---------------

!  External Dimensioning

   integer, INTENT (IN) :: maxlayers, maxwav
   integer, INTENT (IN) :: maxaermoms, maxaerwfs

!  Flag for interpolation of aerosols

   logical, INTENT(in)  :: interpolate_aerosols

!  General Bookkeeping input
!    Total number of aerosol weighting functions = n_AerBulk_Total_wfs
!    Group number of aerosol weighting functions = n_AerBulk_Group_wfs(5)
!    Total collection of aerosol parameters      = AerBulk_pars

   INTEGER         , INTENT (in)   :: n_AerBulk_Total_wfs, n_AerBulk_Group_wfs(5)
   REAL    (fpk)   , INTENT (in)   :: AerBulk_pars(maxaerwfs)

!  Flag for using wavnumber output

   logical, INTENT(in)  :: do_wavnums

!  Numbers

   integer, INTENT (IN) ::  nlayers
   integer, INTENT (IN) ::  nwav

!  Heights and wavelengths

   REAL    (fpk)   , INTENT (IN)   :: wav(maxwav)
   REAL    (fpk)   , INTENT (IN)   :: height_grid(0:maxlayers)

!    nmuller = 1 (scalar code), = 6 (vector code)

   integer, INTENT (IN) ::  nmuller

!  Aerosol moment size cutoff. DEFAULT = 0.001

   REAL    (fpk),    INTENT (IN)   :: momsize_cutoff

!  Type Structure inputs

   TYPE(GEMSTOOL_Config_Inputs) :: GEMSTOOL_INPUTS

!  Mie/Tmatrix PSD inputs
!  ======================

!  PSD inputs (distribution index, PSD parameters)

!      psd_Index      - Index for particle size distribution of spheres
!      psd_pars       - Parameters characterizing PSD (up to 3 allowed)

!    PSD_index = 1 : TWO-PARAMETER GAMMA with alpha and b given
!    PSD_index = 2 : TWO-PARAMETER GAMMA with par(1)= reff and par(2)= veff given
!    PSD_index = 3 : BIMODAL GAMMA with equal mode weights
!    PSD_index = 4 : LOG-NORMAL with rg and sigma given
!    PSD_index = 5 : LOG-NORMAL with reff and veff given
!    PSD_index = 6 : POWER LAW
!    PSD_index = 7 : MODIFIED GAMMA with alpha, rc and gamma given
!    PSD_index = 8 : MODIFIED GAMMA with alpha, b and gamma given

!  FixR1R2 : If  set, Use Internal routine to calculate R1 and R2 (outputs)
!            If Not set, Use Input R1 and R2 for PSD limits.
!  R1, R2         - Minimum and Maximum radii (Microns)
!  N_REAL, N_IMAG - real and imaginary parts, refractive index (N-i.GE.0)

!  Mie-specific inputs
!  ===================

!  Limiting particle size value. Set to 10000.0 default.
!   If you exceed this, program will tell you to increase dimensioning.

!  R1R2_cutoff particle size for setting R1 and R2 internally

!  PSD quadrature control
!    PSD integration ranges is divided into so many blocks.
!    For each block, integrate using Gaussian quadrature, with so many weights.

!  Tmatrix-specific inputs
!  =======================

!  Logical flag for using equal-surface-area sepcification

!      NKMAX.LE.988 is such that NKMAX+2 is the                        
!           number of Gaussian quadrature points used in               
!           integrating over the size distribution for particles
!           MKMAX should be set to -1 for Monodisperse

!      NDGS - parameter controlling the number of division points      
!             in computing integrals over the particle surface.        
!             For compact particles, the recommended value is 2.       
!             For highly aspherical particles larger values (3, 4,...) 
!             may be necessary to obtain convergence.                  
!             The code does not check convergence over this parameter. 
!             Therefore, control comparisons of results obtained with  
!             different NDGS-values are recommended.

!      EPS (Shape_factor) and NP (Spheroid type) - specify the shape of the particles.                
!             For spheroids NP=-1 and EPS is the ratio of the          
!                 horizontal to rotational axes.  EPS is larger than   
!                 1 for oblate spheroids and smaller than 1 for       
!                 prolate spheroids.                                   
!             For cylinders NP=-2 and EPS is the ratio of the          
!                 diameter to the length.                              
!             For Chebyshev particles NP must be positive and 
!                 is the degree of the Chebyshev polynomial, while     
!                 EPS is the deformation parameter                     

!      Accuracy       - accuracy of the computations

!  output
!  ======

!  Loading output

    real(fpk)   , dimension ( maxlayers ),  INTENT (OUT)      :: Loading
    real(fpk)   , dimension ( maxlayers ),  INTENT (OUT)      :: DLoading_Dtau
    real(fpk)   , dimension ( maxlayers, 2 ),  INTENT (OUT)   :: Dloading_Dpars

!  aerosol layer flags

    LOGICAL,      DIMENSION ( maxlayers ), intent(out)  :: AERLAYERFLAGS 

!  AOP output: Number of exapnsion coefficients to be used

   integer, INTENT (OUT)   ::  n_scatmoms

!  Unscaled profiles of optical depth

    real(fpk)   , INTENT (OUT)  :: aertau_unscaled(maxlayers)

!  AOD scaling

    real(fpk)   , INTENT (OUT) :: aod_scaling(maxwav)

!  Aod output, final

    REAL(fpk)   , DIMENSION( maxlayers, maxwav )      , INTENT (OUT)  :: AEROSOL_DELTAU

!  AOPS

    REAL(fpk)   , DIMENSION( maxwav )                 , INTENT (OUT)  :: AEROSOL_SSALBS 
    REAL(fpk)   , DIMENSION( 6, 0:maxaermoms, maxwav ), INTENT (OUT)  :: AEROSOL_SCATMOMS

!  Aerosol distribution characterisstics.
!    1 = Normalization
!    2 = Cross-section
!    3 = Volume
!    4 = REFF
!    5 = VEFF
   real(fpk),     DIMENSION( 5, 2 )           , INTENT (OUT)  :: AEROSOL_DISTCHARS

!  Linearized AOD Scaling and profile

    real(fpk)   , INTENT (OUT)  :: L_aod_scaling     ( maxwav,    maxaerwfs )
    real(fpk)   , INTENT (OUT)  :: L_aertau_unscaled ( maxlayers, maxaerwfs )

!  Linearized AOPs

    REAL(fpk)   , DIMENSION ( maxlayers, maxwav, maxaerwfs )      , INTENT (OUT) :: L_AEROSOL_DELTAU
    REAL(fpk)   , DIMENSION ( maxwav, maxaerwfs )                 , INTENT (OUT) :: L_AEROSOL_SSALBS 
    REAL(fpk)   , DIMENSION ( 6, 0:maxaermoms, maxwav, maxaerwfs ), INTENT (OUT) :: L_AEROSOL_SCATMOMS

!  Exception handling

   logical,        INTENT (OUT)           :: fail1, fail2
   character*(*),  INTENT (OUT)           :: message_Loading(3)
   character*(*),  INTENT (OUT)           :: Messages_Optical(5)

!  LOCAL VARIABLES
!  @@@@@@@@@@@@@@@

!  Mie/Tmatrix LOCAL INPUT variables (Not part of module input)
!  ============================================================

!      Do_Expcoeffs      - Boolean flag for computing Expansion Coefficients
!      Do_Fmatrix        - Boolean flag for computing F-matrix at equal-angles

   logical    :: Do_Expcoeffs
   logical    :: Do_Fmatrix

!      Do_Monodisperse   - Boolean flag for Doing a Monodisperse calculation
!                          If set, the PSD stuff will be turned off internally

   LOGICAL    :: do_Monodisperse

!  F-matrix Angular control input (NOT REQUIRED HERE)

!  Calculate F-matrix at user-defined angles (do_Fmatrix flag MUST BE set)
!       n_Fmatrix_angles = number of user-defined angles. (NPNA)
!       Fmatrix_angles   = user-defined angles, in DEGREES between [0, 180]

!  NPNA - number of equidistant scattering angles (from 0
!             to 180 deg) for which the scattering matrix is
!             calculated.

!    NOT REQUIRED HERE

   INTEGER           :: n_Fmatrix_angles
   REAL    (fpk)     :: Fmatrix_angles(max_Mie_angles)

!  Monoradius     - Monodisperse radius size (Microns)

   real    (fpk)     :: Monoradius

!  (Tmatrix only). Style flag.
!    * This is checked and re-set (if required) for Monodisperse case

   logical           :: Do_psd_OldStyle

!  linearization w.r.t refractive index components

   logical    :: Do_LinearRef

!  linearization w.r.t shape factor (T-matrix only)

   logical    :: Do_LinearEps

!  Linearization for PSD parameters

   logical    :: Do_LinearPSD

!  Lienarization for Loading parameters

   logical     :: do_LinearLoad

!  Lienarization for Bimodal Fraction

   logical     :: do_LinearBmf

!  Mie code OUTPUT variables
!  =========================

!  Bulk distribution parameters
!  ----------------------------

!    1 = Extinction coefficient
!    2 = Scattering coefficient
!    3 = Single scattering albedo

   real(fpk)    :: BMie_bulk (3)

!  linearizations w.r.t. PSD parameters

   real(fpk)    :: LPSD_BMie_bulk (3,3,2)

!  linearizations w.r.t. Refractive index parameters

   real(fpk)    :: LRFE_BMie_bulk (3,2,2)

!  Expansion coefficients and Asymmetry parameter
!  ----------------------------------------------

!  Regular quantities

   integer      :: BMie_ncoeffs
   real(fpk)    :: BMie_expcoeffs (6,0:max_Mie_angles)
   real(fpk)    :: BMie_asymm

!  linearizations w.r.t. PSD parameters

   real(fpk)    :: LPSD_BMie_expcoeffs (6,0:max_Mie_angles,3,2)
   real(fpk)    :: LPSD_BMie_asymm(3,2)

!  linearizations w.r.t. Refractive index parameters

   real(fpk)    :: LRFE_BMie_expcoeffs (6,0:max_Mie_angles,2,2)
   real(fpk)    :: LRFE_BMie_asymm(2,2)

!  F-matrix,  optional output
!  --------------------------

!  F-matrix

   real(fpk)    :: BMie_Fmatrix(4,max_Mie_angles)

!  Linearizations of F-matrix

   real(fpk)    :: LPSD_BMie_Fmatrix(4,max_Mie_angles,3,2)
   real(fpk)    :: LRFE_BMie_Fmatrix(4,max_Mie_angles,2,2)

!  Fraction Jacobian
!  -----------------

   real(fpk)    :: LFRC_BMie_bulk (3)
   real(fpk)    :: LFRC_BMie_expcoeffs (6,0:max_Mie_angles)
   real(fpk)    :: LFRC_BMie_asymm
   real(fpk)    :: LFRC_BMie_Fmatrix (4,max_Mie_angles)

!  Distribution parameters
!  -----------------------

!    1 = Normalization
!    2 = Cross-section
!    3 = Volume
!    4 = REFF
!    5 = VEFF

   real(fpk)     :: BMie_dist (5,2)
   real(fpk)     :: LPSD_BMie_dist (5,3,2)

!  Exception handling
!  ------------------

   character*90  :: Mie_Bmessages(3)
   character*90  :: Mie_trace_3

!  Tmatrix code OUTPUT variables (Notation similar)
!  =============================

!  Bulk distribution parameters

   real(fpk)    :: BTmat_bulk (3)

!  linearizations w.r.t. PSD parameters

   real(fpk)    :: LPSD_BTmat_bulk (3,3,2)

!  linearizations w.r.t. RefIdx/Eps parameters

   real(fpk)    :: LRFE_BTmat_bulk (3,3,2)

!  Expansion coefficients and Asymmetry parameter
!  ----------------------------------------------

!  Regular quantities

   integer       :: BTmat_ncoeffs
   real(fpk)     :: BTmat_expcoeffs (NPL1,6)
   real(fpk)     :: BTmat_asymm

!  linearizations w.r.t. PSD parameters

   real(fpk)     :: LPSD_BTmat_expcoeffs (NPL1,6,3,2)
   real(fpk)     :: LPSD_BTmat_asymm(3,2)

!  linearizations w.r.t. RefIdx/Eps parameters

   real(fpk)     :: LRFE_BTmat_expcoeffs (NPL1,6,3,2)
   real(fpk)     :: LRFE_BTmat_asymm(3,2)

!  F-matrix,  optional output
!  --------------------------

!  F-matrix

   real(fpk)     :: BTmat_Fmatrix (MAXNPA,6)

!  Linearizations of F-matrix

   real(fpk)     :: LPSD_BTmat_Fmatrix (MAXNPA,6,3,2)
   real(fpk)     :: LRFE_BTmat_Fmatrix (MAXNPA,6,3,2)

!  Fraction Jacobian
!  -----------------

   real(fpk)     :: LFRC_BTmat_bulk (3)
   real(fpk)     :: LFRC_BTmat_expcoeffs (NPL1,6)
   real(fpk)     :: LFRC_BTmat_asymm
   real(fpk)     :: LFRC_BTmat_Fmatrix (MAXNPA,6)

!  Distribution parameters
!  -----------------------

!    1 = Normalization
!    2 = Cross-section
!    3 = Volume
!    4 = REFF
!    5 = VEFF

   real(fpk)     :: BTmat_dist (5,2)
   real(fpk)     :: LPSD_BTmat_dist (5,3,2)

!  Exception handling

   character*90  :: Tmat_message
   character*90  :: Tmat_trace
   character*90  :: Tmat_trace_2
   character*90  :: Tmat_trace_3

!  Local variables
!  ===============

!  Local aerosol properties ! New, @@@ RTS 09/11/12

!   integer   :: PSD_index(2)              ! New, @@@ RTS 09/11/12
!   real(fpk) :: PSD_pars(3,2)             ! New, @@@ RTS 09/11/12
!   real(fpk) :: n_real(2), n_imag(2)      ! New, @@@ RTS 09/11/12

!  AOP output: Reference values
!    * These are the values at reference wavelength w0
!    * They are set for wavelength w0, then used again

    real(fpk)     :: extinction_ref, L_extinction_ref(maxaerwfs)

!  Local mask

   integer :: distpars_mask(9), npsd(2)
   data distpars_mask / 2,2,3,2,3,3,3,3,0 /

!  Help Variables

   character*10 :: ctype
   character*3  :: cwav

   logical      :: trawl, do_bimodal
   integer      :: istatus
   integer      :: NLIN, q, qm, qm1, qm2, qmt
   integer      :: n, k, kd, l, m, point_index, w, wc, wavmask(maxwav)
   integer      :: n_scatmoms_w, n_aerwavs, local_nwav, wa, wa1, wa2, wastart

   real(fpk)    :: fa1, fa2, lam, lamstart, lamfinish
   real(fpk)    :: wavelength, Mie_wavelength, Tmat_wavelength, extinction, L_extinction(maxaerwfs)
   real(fpk)    :: normfac(maxaerwfs)

!  Interpolation arrays
!     UV-Vis : 56  is enough wavelengths for 10 nm intervals over a 250-800  nm range
!     SWIr   : 136 is enough wavelengths for 10 nm intervals over a 750-2100 nm range
!    NOTE    : CAN MAKE THESE ARRAYS ALLOCATABLE ----------THINK ABOUT IT !!!!!!!!!
!    NOTE    : 16 is the maximum number of aerosol weighting functions

   real(fpk)    :: aerwav(136),local_aod_scaling(136),local_aerssalbs(136), local_scatmoms(6,0:maxaermoms,136)
   real(fpk)    :: local_L_aod_scaling(136,16),local_L_aerssalbs(136,16), local_L_scatmoms(6,0:maxaermoms,136,16)

!  Local control

!   logical, parameter :: do_iopchecker   = .true.
   logical, parameter :: do_iopchecker   = .false.
   logical            :: do_aer_Jacobians

!  Initialize output
!  =================

!  Initialize exception handling

   fail1 = .false.
   fail2 = .false.
   Message_Loading  = ' '
   Messages_optical = ' '

!  initialize Aerosol Loading

   Loading        = 0.0d0
   Dloading_Dtau  = 0.0d0
   Dloading_Dpars = 0.0d0
   aerlayerflags = .false.

!  Initialize nscatmoms

   n_scatmoms = 50000

!  Initialize optical properties

   extinction_ref    = 0.0d0
   aod_scaling       = 0.0d0
   aertau_unscaled   = 0.0d0
   aerosol_deltau    = 0.0d0
   aerosol_ssalbs    = 0.0d0
   aerosol_scatmoms  = 0.0d0
   aerosol_distchars = 0.0d0

   L_aod_scaling      = 0.0d0
   L_aertau_unscaled  = 0.0d0
   L_aerosol_deltau   = 0.0d0
   L_aerosol_ssalbs   = 0.0d0
   L_aerosol_scatmoms = 0.0d0

!  Set local Mie/Tmatrix variables

   do_monodisperse = .false.             ! Always false
   Do_Fmatrix      = .false.             ! Always false
   DO_Expcoeffs    = .false.             ! this will be set later on
   monoradius      = 0.0d0
   do_psd_oldstyle = .false.

!  Proxy: bimodal flag

   do_bimodal = GEMSTOOL_INPUTS%MieTmat%do_bimodal

!  Proxies: local Mie/Tmatrix Linearization variables, for the 5 input GROUPS

   do_LinearLoad = GEMSTOOL_INPUTS%LinControl%do_AerBulk_LoadPars_Jacobians  !!CHECK!!Y.Jung
   do_LinearRef  = GEMSTOOL_INPUTS%LinControl%do_AerBulk_RefIndex_Jacobians
   do_LinearPSD  = GEMSTOOL_INPUTS%LinControl%do_AerBulk_SizeDist_Jacobians
   do_LinearEps  = GEMSTOOL_INPUTS%Atmosph%do_Tmat_aerosols .and. &
                   GEMSTOOL_INPUTS%LinControl%do_AerBulk_ShapeFac_Jacobians
   do_LinearBmf  = GEMSTOOL_INPUTS%MieTmat%do_bimodal       .and. &
                   GEMSTOOL_INPUTS%LinControl%do_AerBulk_BmodFrac_Jacobian

!  overall Jacobian flag

   do_aer_Jacobians = do_LinearLoad.or.do_LinearRef.or.do_LinearPSD.or.do_LinearEps.or.do_LinearBmf

! Set JACOBIAN BOOKKEEPING 

   npsd(1) = distpars_mask(GEMSTOOL_INPUTS%MieTmat%PSDIndex(1))
   if ( do_bimodal ) npsd(2) = distpars_mask(GEMSTOOL_INPUTS%MieTmat%PSDIndex(2))

   if ( do_aer_Jacobians ) then
      qm1 = SUM(n_AerBulk_Group_wfs(2:5))
      qm2 = qm1 + 1
      qmt = qm1 + n_AerBulk_Group_wfs(1)
   endif
!   write(*,*)qmt,n_AerBulk_Total_wfs ; pause
!   qmt = n_AerBulk_Total_wfs                ! Check this 

!  Now form the aerosol Loading
!  ----------------------------

!    Loading = optical depth profile

!    Derivatives : 
!       Cases 1-3 : dloading_Dtau      = derivative of profile w.r.t the total aerosol optical depth at wavelength w0
!       Case 2    : dloading_Dpars(1)  = derivative of profile w.r.t the relaxation parameter (Exponential)
!       Case 3    : dloading_Dpars(1)  = derivative of profile w.r.t the GDF Peak height
!       Case 3    : dloading_Dpars(2)  = derivative of profile w.r.t the GDF Half Width 

!  Case 1: Uniform layer of aerosol
!  ********************************

!   write(*,*)GEMSTOOL_INPUTS%AerLoad%loading_case ; pause 'GRONK'

   if ( GEMSTOOL_INPUTS%AerLoad%loading_case .eq. 1 ) then

      CALL profiles_uniform  &
          ( maxlayers, nlayers, height_grid, do_aer_Jacobians,  & ! Inputs
            GEMSTOOL_INPUTS%AerLoad%loading_upperboundary,      & ! Inputs
            GEMSTOOL_INPUTS%AerLoad%loading_lowerboundary,      & ! Inputs
            GEMSTOOL_INPUTS%AerLoad%aertau_input_w0,            & ! Inputs
            Loading, Dloading_Dtau,                             & ! output
            fail1, message_Loading(1), message_Loading(2) )       ! Exception Handling

      if ( fail1 ) message_Loading(3) = 'Uniform aerosol Loading failed'

!  Case 2: Exponential decay profile
!  *********************************

   else if ( GEMSTOOL_INPUTS%AerLoad%loading_case .eq. 2 ) then

      CALL profiles_expone &
          ( maxlayers, nlayers, height_grid, do_aer_Jacobians,  & ! Inputs
            GEMSTOOL_INPUTS%AerLoad%loading_upperboundary,      & ! Inputs
            GEMSTOOL_INPUTS%AerLoad%loading_lowerboundary,      & ! Inputs
            GEMSTOOL_INPUTS%AerLoad%exploading_relaxation,      & ! Inputs
            GEMSTOOL_INPUTS%AerLoad%aertau_input_w0,            & ! Inputs
            Loading, Dloading_Dtau, Dloading_Dpars(:,1),        & ! output
            fail1, message_Loading(1), message_Loading(2) )       ! Exception Handling

      if ( fail1 ) message_Loading(3) = 'Exponential aerosol Loading failed'

!  Case 3: GDF (quasi-Gaussian) profile
!  ************************************

   else if ( GEMSTOOL_INPUTS%AerLoad%loading_case .eq. 3 ) then

      CALL profiles_gdfone &
          ( maxlayers, nlayers, height_grid, do_aer_Jacobians,  & ! Inputs
            GEMSTOOL_INPUTS%AerLoad%loading_upperboundary,      & ! Inputs
            GEMSTOOL_INPUTS%AerLoad%gdfloading_peakheight,      & ! Inputs
            GEMSTOOL_INPUTS%AerLoad%loading_lowerboundary,      & ! Inputs
            GEMSTOOL_INPUTS%AerLoad%gdfloading_halfwidth,       & ! Inputs
            GEMSTOOL_INPUTS%AerLoad%aertau_input_w0,            & ! Inputs
            Loading, Dloading_Dtau, Dloading_Dpars(:,1), Dloading_Dpars(:,2),     & ! output
            fail1, message_Loading(1), message_Loading(2) )                         ! Exception Handling

      if ( fail1 ) message_Loading(3) = 'GDF aerosol Loading failed'

   endif

!  Return if failure at this stage

   if ( fail1 ) return

!  Assign Unscaled loadings

   do n = 1, nlayers
      aerlayerflags(n) =  ( Loading(n) .ne. 0.0d0  )
      aertau_unscaled(n) = loading(n)
   enddo

!  Assign Linearizations of Unscaled Loadings

   if ( do_aer_Jacobians ) then
      do n = 1, nlayers
         aertau_unscaled(n) = loading(n)
!         do q = 1, qm1
!            L_aertau_unscaled(n,q) = loading(n)
!         enddo
         L_aertau_unscaled(n,qm1+1) = Dloading_Dtau(n)
         if ( GEMSTOOL_INPUTS%AerLoad%loading_case .eq. 2 ) then
            L_aertau_unscaled(n,qm1+2) = Dloading_Dpars(n,1)
         else if ( GEMSTOOL_INPUTS%AerLoad%loading_case .eq. 3 ) then
            L_aertau_unscaled(n,qm1+2) = Dloading_Dpars(n,1)
            L_aertau_unscaled(n,qm1+3) = Dloading_Dpars(n,2)
         endif
      enddo
   endif

!  debug

!   do n = 1, nlayers
!      if (aerlayerflags(n) ) write(*,*)n,aertau_unscaled(n),(L_aertau_unscaled(n,qm1+q),q=1,3)
!   enddo
!   pause 'aerosol loading'

  
!  Interpolation setup
!  ===================

   if ( interpolate_aerosols ) then
      trawl = .true. ; wa = 0
      if ( .not. do_wavnums ) then
         lamstart = 200.0d0 ; lam = lamstart        !  Smallest wavelength is 200 nm (UVN application)
         do while (trawl)
            lam = lam + 20.0d0
            if ( lam.ge.wav(1) ) then
               wa = wa + 1 ; aerwav(wa) = lam - 20.0d0
               if ( lam .gt. wav(nwav) ) then
                  wa = wa + 1 ; aerwav(wa) = lam ; trawl = .false.
               endif
            endif
         enddo
          n_aerwavs = wa ; local_nwav = n_aerwavs
      else
         lamfinish = 2100.0d0 ; lam = lamfinish     !  Largest wavelength is 2100 nm (NSW application)
         do while (trawl)
            lam = lam - 20.0d0
            if ( lam.le.1.0d+07/wav(1) ) then
               wa = wa + 1 ; aerwav(wa) = lam + 20.0d0
               if ( lam .lt. 1.0d+07/wav(nwav) ) then
                  wa = wa + 1 ; aerwav(wa) = lam ; trawl = .false.
               endif
            endif
         enddo
          n_aerwavs = wa ; local_nwav = n_aerwavs
      endif
   else
      local_nwav = nwav
   endif

!  Check to see if reference wavelength is one of the set. Initialize Mask.

   point_index = 0
   if ( .not. do_wavnums ) then
      if ( interpolate_aerosols ) then
         do w = 1, n_aerwavs
            wavmask(w) = w ; if ( aerwav(w) .eq. GEMSTOOL_INPUTS%AerLoad%reference_w0 ) point_index = w
         enddo
      else
         do w = 1, nwav
            wavmask(w) = w ; if ( wav(w)    .eq. GEMSTOOL_INPUTS%AerLoad%reference_w0 ) point_index = w
         enddo
      endif
   else
      if ( interpolate_aerosols ) then
         do w = 1, n_aerwavs
            wavmask(w) = w ; if ( aerwav(w) .eq. GEMSTOOL_INPUTS%AerLoad%reference_w0 ) point_index = w
         enddo
      else
         do w = 1, nwav
            wavmask(w) = w
         enddo
      endif
   endif

!   write(*,*)local_nwav, n_aerwavs, lambda_index

!  Mask to use if reference wavelength is one of list of wavelengths. [UVN only]

   if ( point_index .ne. 0 ) then
     wavmask(1) = point_index
     wc = 1
     do w = 1, point_index - 1
       wc = wc + 1 ; wavmask(wc) = w
     enddo
     do w = point_index + 1, local_nwav
       wc = wc + 1 ; wavmask(wc) = w
     enddo
   endif

!  Continuation for avoiding Mie calculation

   if ( GEMSTOOL_INPUTS%Atmosph%do_Tmat_aerosols ) go to 544

! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
!      M I E   C a l c u l a t i o n 
! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

!  Prepare the reference-wavelength Mie Inputs
!  ===========================================

   if ( point_index .eq. 0 ) then

!  Only require extinction coefficient and its linearization if flagged
!  Set the local Mie program inputs (bulk properties only)

      Do_Expcoeffs     = .FALSE.

!  reference wavelength

      wavelength     = GEMSTOOL_INPUTS%AerLoad%reference_w0
      Mie_wavelength = wavelength/1000.0d0

!  progress

      if ( do_aer_jacobians ) then
         write(*,*)'Linearized Mie Aerosol calculation, reference wavelength = ', wavelength
      else 
         write(*,*)'Regular Mie Aerosol calculation, reference wavelength = ', wavelength
      endif

!  BIMODAL CALL, with or without Jacobians

      if ( do_bimodal) then
         if ( do_aer_Jacobians ) then
            call RTSMie_master_bimodal_plus                       &
            ( Do_Expcoeffs, Do_Fmatrix, do_Monodisperse,          & ! I
              Do_LinearRef, Do_LinearPSD,                         & ! I
              GEMSTOOL_INPUTS%MieTmat%PSDIndex,        GEMSTOOL_INPUTS%MieTmat%PSDpars,   MonoRadius,               & ! I
              GEMSTOOL_INPUTS%MieTmat%R1,              GEMSTOOL_INPUTS%MieTmat%R2, GEMSTOOL_INPUTS%MieTmat%FixR1R2, & ! I
              GEMSTOOL_INPUTS%MieTmat%nblocks,         GEMSTOOL_INPUTS%MieTmat%nweights,                            & ! I
              GEMSTOOL_INPUTS%MieTmat%xparticle_limit, GEMSTOOL_INPUTS%MieTmat%R1R2_cutoff,                         & ! I
              n_Fmatrix_angles, Fmatrix_angles,  Mie_wavelength,                                                    & ! I
              GEMSTOOL_INPUTS%MieTmat%nreal,           GEMSTOOL_INPUTS%MieTmat%nimag,                               & ! I
              GEMSTOOL_INPUTS%MieTmat%bimodal_fraction,                                                             & ! I
              BMie_bulk, BMie_asymm, BMie_ncoeffs,           & ! O
              BMie_expcoeffs, BMie_Fmatrix,                  & ! O
              LPSD_BMie_bulk, LPSD_BMie_asymm,               & ! O
              LPSD_BMie_expcoeffs, LPSD_BMie_Fmatrix,        & ! O
              LRFE_BMie_bulk, LRFE_BMie_asymm,               & ! O
              LRFE_BMie_expcoeffs, LRFE_BMie_Fmatrix,        & ! O
              LFRC_BMie_bulk, LFRC_BMie_asymm,               & ! O
              LFRC_BMie_expcoeffs, LFRC_BMie_Fmatrix,        & ! O
              BMie_dist, LPSD_BMie_dist,                     & ! O
              fail2, istatus, Mie_Bmessages, Mie_trace_3 )     ! O
         else
            call RTSMie_master_bimodal                            &
            ( Do_Expcoeffs, Do_Fmatrix, do_Monodisperse,          & ! I
              GEMSTOOL_INPUTS%MieTmat%PSDIndex,        GEMSTOOL_INPUTS%MieTmat%PSDpars,   MonoRadius,               & ! I
              GEMSTOOL_INPUTS%MieTmat%R1,              GEMSTOOL_INPUTS%MieTmat%R2, GEMSTOOL_INPUTS%MieTmat%FixR1R2, & ! I
              GEMSTOOL_INPUTS%MieTmat%nblocks,         GEMSTOOL_INPUTS%MieTmat%nweights,                            & ! I
              GEMSTOOL_INPUTS%MieTmat%xparticle_limit, GEMSTOOL_INPUTS%MieTmat%R1R2_cutoff,                         & ! I
              n_Fmatrix_angles, Fmatrix_angles,  Mie_wavelength,                                                    & ! I
              GEMSTOOL_INPUTS%MieTmat%nreal,           GEMSTOOL_INPUTS%MieTmat%nimag,                               & ! I
              GEMSTOOL_INPUTS%MieTmat%bimodal_fraction,                                                             & ! I
              BMie_bulk, BMie_asymm, BMie_ncoeffs,           & ! O
              BMie_expcoeffs, BMie_Fmatrix, BMie_dist,       & ! O
              fail2, istatus, Mie_Bmessages, Mie_trace_3 )     ! O
         endif
      endif

!  SINGLE CALL, with or without Jacobians

      if ( .not.do_bimodal ) then
         BMie_dist(:,2) = 0.0d0
         if ( do_aer_Jacobians ) then
            call RTSMie_main_plus                                   &  !---MIE CALL
              ( Do_Expcoeffs, Do_Fmatrix, do_Monodisperse,          & ! I
                Do_LinearRef, Do_LinearPSD,                         & ! I
                GEMSTOOL_INPUTS%MieTmat%PSDIndex(1),     GEMSTOOL_INPUTS%MieTmat%PSDpars(:,1), MonoRadius,                   & ! I
                GEMSTOOL_INPUTS%MieTmat%R1(1),           GEMSTOOL_INPUTS%MieTmat%R2(1),  GEMSTOOL_INPUTS%MieTmat%FixR1R2(1), & ! I
                GEMSTOOL_INPUTS%MieTmat%nblocks(1),      GEMSTOOL_INPUTS%MieTmat%nweights(1),                                & ! I
                GEMSTOOL_INPUTS%MieTmat%xparticle_limit, GEMSTOOL_INPUTS%MieTmat% R1R2_cutoff(1),                            & ! I
                n_Fmatrix_angles, Fmatrix_angles,  Mie_wavelength,                                                           & ! I
                GEMSTOOL_INPUTS%MieTmat%nreal(1),       GEMSTOOL_INPUTS%MieTmat%nimag(1),                                    & ! I
                BMie_bulk, BMie_asymm, BMie_ncoeffs, BMie_expcoeffs, BMie_Fmatrix, BMie_dist(:,1), & ! O
                LPSD_BMie_bulk(:,:,1), LPSD_BMie_asymm(:,1),  LPSD_BMie_expcoeffs(:,:,:,1),        & ! O
                LPSD_BMie_Fmatrix(:,:,:,1), LPSD_BMie_dist(:,:,1), LRFE_BMie_bulk(:,:,1),          & ! O
                LRFE_BMie_asymm(:,1), LRFE_BMie_expcoeffs(:,:,:,1), LRFE_BMie_Fmatrix(:,:,:,1),    & ! O
                fail2, istatus, Mie_Bmessages(1), Mie_Bmessages(2), Mie_Bmessages(3) )               ! O
         else
            call RTSMie_main                                        & !---MIE CALL
              ( Do_Expcoeffs, Do_Fmatrix, do_Monodisperse,          & ! I
                GEMSTOOL_INPUTS%MieTmat%PSDIndex(1),     GEMSTOOL_INPUTS%MieTmat%PSDpars(:,1), MonoRadius,                   & ! I
                GEMSTOOL_INPUTS%MieTmat%R1(1),           GEMSTOOL_INPUTS%MieTmat%R2(1),  GEMSTOOL_INPUTS%MieTmat%FixR1R2(1), & ! I
                GEMSTOOL_INPUTS%MieTmat%nblocks(1),      GEMSTOOL_INPUTS%MieTmat%nweights(1),                                & ! I
                GEMSTOOL_INPUTS%MieTmat%xparticle_limit, GEMSTOOL_INPUTS%MieTmat% R1R2_cutoff(1),                            & ! I
                n_Fmatrix_angles, Fmatrix_angles, Mie_wavelength,                                                            & ! I
                GEMSTOOL_INPUTS%MieTmat%nreal(1),       GEMSTOOL_INPUTS%MieTmat%nimag(1),                                    & ! I
                BMie_bulk, BMie_asymm, BMie_ncoeffs, BMie_expcoeffs, BMie_Fmatrix, BMie_dist(:,1), & ! O
                fail2, istatus, Mie_Bmessages(1), Mie_Bmessages(2), Mie_Bmessages(3) )               ! O
         endif
      endif

!  Exception handling on everything

      if ( Fail2 ) then  
         do m = 1, 3   
            Messages_Optical(m) = adjustl(trim(Mie_Bmessages(m)))
         enddo
         Messages_Optical(4) = 'Single Mie Call'
        if ( GEMSTOOL_INPUTS%MieTmat%do_bimodal ) Messages_Optical(4) = adjustl(trim(Mie_trace_3))
         ctype = 'Regular   ' ; if ( do_aer_Jacobians ) ctype = 'Linearized'
         Messages_optical(5) = 'First call to the '//ctype//' Mie program in GEOMSTOOL_AerProperties_Plus, reference wavelength'
         return
      endif

!  Set the reference quantities. NOTE the linearization Bookkeeping.

      extinction_ref    = BMie_bulk(1) ; qm  = 0
      aerosol_distchars = BMie_dist
      if ( do_aer_Jacobians ) then
         if ( Do_LinearRef) then
            L_extinction_ref(qm+1:qm+2) = LRFE_BMie_bulk(1,1:2,1) ; qm = qm + 2
         endif
         if ( Do_LinearPSD) then
            L_extinction_ref(qm+1:qm+npsd(1)) = LPSD_BMie_bulk(1,1:npsd(1),1) ; qm = qm + npsd(1)
         endif
         if ( do_bimodal ) then
            if ( Do_LinearRef) then
               L_extinction_ref(qm+1:qm+2) = LRFE_BMie_bulk(1,1:2,2) ; qm = qm + 2
            endif
            if ( Do_LinearPSD) then
               L_extinction_ref(qm+1:qm+npsd(2)) = LPSD_BMie_bulk(1,1:npsd(2),2) ; qm = qm + npsd(2)
            endif
            if ( do_LinearBmf ) L_extinction_ref(qm+1) = LFRC_BMie_bulk(1)
         endif
      endif

!      do q = 1, 9
!        write(*,*)'Ext Ref',q,extinction_ref, L_extinction_ref(q)*aerosol_pars(q)
!      enddo

!  End Mie reference-wavelength calculation

   endif

!  Prepare General (all-wavelength, all-wavenumber) Mie inputs
!  ===========================================================

!  wavelength loop. First wavelength will be the reference, if in  list.
!  Wavnumber  loop. 

   do wc = 1, local_nwav

!  Wavelengths [nm]

      w = wavmask(wc)
      if ( interpolate_aerosols ) then
         wavelength = aerwav(w)
      else
        if ( do_wavnums      ) wavelength = 1.0d+07/wav(w)
        if ( .not.do_wavnums ) wavelength = wav(w)
      endif

!  progress

      if ( do_aer_jacobians ) then
         write(*,*)'Linearized Mie Aerosol calculation, doing Point/wavelength # ',wc, wavelength
      else 
         write(*,*)'Regular Mie Aerosol calculation, doing Point/wavelength # ',wc, wavelength
      endif

!  wavelength for the Mie code (micron unit)  

      Mie_wavelength = wavelength/1000.0d0

!  First Call to develop aerosol Mie properties
!  --------------------------------------------

!  Set the local Mie program inputs (general)

      Do_Expcoeffs     = .TRUE.

!  BIMODAL CALL, with or without Jacobians

      if ( do_bimodal) then
         if ( do_aer_Jacobians ) then
            call RTSMie_master_bimodal_plus                       &
            ( Do_Expcoeffs, Do_Fmatrix, do_Monodisperse,          & ! I
              Do_LinearRef, Do_LinearPSD,                         & ! I
              GEMSTOOL_INPUTS%MieTmat%PSDIndex,        GEMSTOOL_INPUTS%MieTmat%PSDpars,   MonoRadius,               & ! I
              GEMSTOOL_INPUTS%MieTmat%R1,              GEMSTOOL_INPUTS%MieTmat%R2, GEMSTOOL_INPUTS%MieTmat%FixR1R2, & ! I
              GEMSTOOL_INPUTS%MieTmat%nblocks,         GEMSTOOL_INPUTS%MieTmat%nweights,                            & ! I
              GEMSTOOL_INPUTS%MieTmat%xparticle_limit, GEMSTOOL_INPUTS%MieTmat%R1R2_cutoff,                         & ! I
              n_Fmatrix_angles, Fmatrix_angles,  Mie_wavelength,                                                    & ! I
              GEMSTOOL_INPUTS%MieTmat%nreal,           GEMSTOOL_INPUTS%MieTmat%nimag,                               & ! I
              GEMSTOOL_INPUTS%MieTmat%bimodal_fraction,                                                             & ! I
              BMie_bulk, BMie_asymm, BMie_ncoeffs,           & ! O
              BMie_expcoeffs, BMie_Fmatrix,                  & ! O
              LPSD_BMie_bulk, LPSD_BMie_asymm,               & ! O
              LPSD_BMie_expcoeffs, LPSD_BMie_Fmatrix,        & ! O
              LRFE_BMie_bulk, LRFE_BMie_asymm,               & ! O
              LRFE_BMie_expcoeffs, LRFE_BMie_Fmatrix,        & ! O
              LFRC_BMie_bulk, LFRC_BMie_asymm,               & ! O
              LFRC_BMie_expcoeffs, LFRC_BMie_Fmatrix,        & ! O
              BMie_dist, LPSD_BMie_dist,                     & ! O
              fail2, istatus, Mie_Bmessages, Mie_trace_3 )     ! O
         else
            call RTSMie_master_bimodal                            &
            ( Do_Expcoeffs, Do_Fmatrix, do_Monodisperse,          & ! I
              GEMSTOOL_INPUTS%MieTmat%PSDIndex,        GEMSTOOL_INPUTS%MieTmat%PSDpars,   MonoRadius,               & ! I
              GEMSTOOL_INPUTS%MieTmat%R1,              GEMSTOOL_INPUTS%MieTmat%R2, GEMSTOOL_INPUTS%MieTmat%FixR1R2, & ! I
              GEMSTOOL_INPUTS%MieTmat%nblocks,         GEMSTOOL_INPUTS%MieTmat%nweights,                            & ! I
              GEMSTOOL_INPUTS%MieTmat%xparticle_limit, GEMSTOOL_INPUTS%MieTmat%R1R2_cutoff,                         & ! I
              n_Fmatrix_angles, Fmatrix_angles,  Mie_wavelength,                                                    & ! I
              GEMSTOOL_INPUTS%MieTmat%nreal,           GEMSTOOL_INPUTS%MieTmat%nimag,                               & ! I
              GEMSTOOL_INPUTS%MieTmat%bimodal_fraction,                                                             & ! I
              BMie_bulk, BMie_asymm, BMie_ncoeffs,           & ! O
              BMie_expcoeffs, BMie_Fmatrix, BMie_dist,       & ! O
              fail2, istatus, Mie_Bmessages, Mie_trace_3 )     ! O
         endif
      endif

!  SINGLE CALL, with or without Jacobians

      if ( .not.do_bimodal ) then
         BMie_dist(:,2) = 0.0d0
         if ( do_aer_Jacobians ) then
            call RTSMie_main_plus                                   &  !---MIE CALL
              ( Do_Expcoeffs, Do_Fmatrix, do_Monodisperse,          & ! I
                Do_LinearRef, Do_LinearPSD,                         & ! I
                GEMSTOOL_INPUTS%MieTmat%PSDIndex(1),     GEMSTOOL_INPUTS%MieTmat%PSDpars(:,1), MonoRadius,                   & ! I
                GEMSTOOL_INPUTS%MieTmat%R1(1),           GEMSTOOL_INPUTS%MieTmat%R2(1),  GEMSTOOL_INPUTS%MieTmat%FixR1R2(1), & ! I
                GEMSTOOL_INPUTS%MieTmat%nblocks(1),      GEMSTOOL_INPUTS%MieTmat%nweights(1),                                & ! I
                GEMSTOOL_INPUTS%MieTmat%xparticle_limit, GEMSTOOL_INPUTS%MieTmat% R1R2_cutoff(1),                            & ! I
                n_Fmatrix_angles, Fmatrix_angles,  Mie_wavelength,                                                           & ! I
                GEMSTOOL_INPUTS%MieTmat%nreal(1),       GEMSTOOL_INPUTS%MieTmat%nimag(1),                                    & ! I
                BMie_bulk, BMie_asymm, BMie_ncoeffs, BMie_expcoeffs, BMie_Fmatrix, BMie_dist(:,1), & ! O
                LPSD_BMie_bulk(:,:,1), LPSD_BMie_asymm(:,1),  LPSD_BMie_expcoeffs(:,:,:,1),        & ! O
                LPSD_BMie_Fmatrix(:,:,:,1), LPSD_BMie_dist(:,:,1), LRFE_BMie_bulk(:,:,1),          & ! O
                LRFE_BMie_asymm(:,1), LRFE_BMie_expcoeffs(:,:,:,1), LRFE_BMie_Fmatrix(:,:,:,1),    & ! O
                fail2, istatus, Mie_Bmessages(1), Mie_Bmessages(2), Mie_Bmessages(3) )               ! O
         else
            call RTSMie_main                                        & !---MIE CALL
              ( Do_Expcoeffs, Do_Fmatrix, do_Monodisperse,          & ! I
                GEMSTOOL_INPUTS%MieTmat%PSDIndex(1),     GEMSTOOL_INPUTS%MieTmat%PSDpars(:,1), MonoRadius,                   & ! I
                GEMSTOOL_INPUTS%MieTmat%R1(1),           GEMSTOOL_INPUTS%MieTmat%R2(1),  GEMSTOOL_INPUTS%MieTmat%FixR1R2(1), & ! I
                GEMSTOOL_INPUTS%MieTmat%nblocks(1),      GEMSTOOL_INPUTS%MieTmat%nweights(1),                                & ! I
                GEMSTOOL_INPUTS%MieTmat%xparticle_limit, GEMSTOOL_INPUTS%MieTmat% R1R2_cutoff(1),                            & ! I
                n_Fmatrix_angles, Fmatrix_angles, Mie_wavelength,                                                            & ! I
                GEMSTOOL_INPUTS%MieTmat%nreal(1),       GEMSTOOL_INPUTS%MieTmat%nimag(1),                                    & ! I
                BMie_bulk, BMie_asymm, BMie_ncoeffs, BMie_expcoeffs, BMie_Fmatrix, BMie_dist(:,1), & ! O
                fail2, istatus, Mie_Bmessages(1), Mie_Bmessages(2), Mie_Bmessages(3) )               ! O
         endif
      endif

!  Exception handling on everything

      if ( Fail2 ) then
         write(cwav,'(I3)')wc
         do m = 1, 3
            Messages_Optical(m) = adjustl(trim(Mie_Bmessages(m)))
         enddo
          Messages_Optical(4) = 'Single Mie Call'; if ( do_bimodal ) Messages_Optical(4) = adjustl(trim(Mie_trace_3))
          ctype = 'Regular   ' ; if ( do_aer_Jacobians ) ctype = 'Linearized'
          Messages_Optical(5) = 'Second call to the '//ctype//' Mie program in GEOMSTOOL_AerProperties_Plus, wavelength # '//cwav
         return
      endif

!  Set the reference quantities, if reference wavelength is in the list.
!   Values for the first (masked) wavelength

      if ( point_index .ne. 0 .and. wc.eq.1 ) then
         extinction_ref    = BMie_bulk(1) ; qm  = 0
         aerosol_distchars = BMie_dist
         if ( do_aer_Jacobians ) then
            if ( Do_LinearRef) then
               L_extinction_ref(qm+1:qm+2) = LRFE_BMie_bulk(1,1:2,1) ; qm = qm + 2
            endif
            if ( Do_LinearPSD) then
               L_extinction_ref(qm+1:qm+npsd(1)) = LPSD_BMie_bulk(1,1:npsd(1),1) ; qm = qm + npsd(1)
            endif
            if ( do_bimodal ) then
               if ( Do_LinearRef) then
                  L_extinction_ref(qm+1:qm+2) = LRFE_BMie_bulk(1,1:2,2) ; qm = qm + 2
               endif
               if ( Do_LinearPSD) then
                  L_extinction_ref(qm+1:qm+npsd(2)) = LPSD_BMie_bulk(1,1:npsd(2),2) ; qm = qm + npsd(2)
               endif
               if ( do_LinearBmf ) L_extinction_ref(qm+1) = LFRC_BMie_bulk(1)
            endif
         endif
      endif

!  INTERPOLATION OPTION, save output to local arrays
!  =================================================

      if ( interpolate_aerosols ) then

!  a. Regular properties
!  *********************

         if ( point_index .ne. 0 .and. wc.eq.1 ) then
            extinction             = extinction_ref
            local_aod_scaling(w)   = 1.0d0
         else
            extinction             = BMie_bulk(1)
            local_aod_scaling(w)   = extinction / extinction_ref
         endif
         local_aerssalbs(w)     = BMie_bulk(3)
         l = 0 ; local_scatmoms(1,0,w) = 1.0d0
         do while (local_scatmoms(1,l,w).gt.momsize_cutoff.and.l.lt.maxaermoms )
            l = l + 1 ; local_scatmoms(1,l,w) = Bmie_expcoeffs(1,l)
         enddo
         n_scatmoms_w = l
         do l = 0, n_scatmoms_w
            local_scatmoms(2:nmuller,l,w) = BMie_expcoeffs(2:nmuller,l) 
         enddo

!  b. Linearized properties
!  ************************

         if ( do_aer_Jacobians ) then

!  Linearized extinction

            if ( point_index .ne. 0 .and. wc.eq.1 ) then
               L_extinction(1:qm1) = L_extinction_Ref(1:qm1)
            else
               qm = 0
               if ( Do_LinearRef) then
                  L_extinction(qm+1:qm+2) = LRFE_BMie_bulk(1,1:2,1) ; qm = qm + 2
               endif
               if ( Do_LinearPSD) then
                  L_extinction(qm+1:qm+npsd(1)) = LPSD_BMie_bulk(1,1:npsd(1),1) ; qm = qm + npsd(1)
               endif
               if ( do_bimodal ) then
                  if ( Do_LinearRef) then
                     L_extinction(qm+1:qm+2) = LRFE_BMie_bulk(1,1:2,2) ; qm = qm + 2
                  endif
                  if ( Do_LinearPSD) then
                     L_extinction(qm+1:qm+npsd(2)) = LPSD_BMie_bulk(1,1:npsd(2),2) ; qm = qm + npsd(2)
                  endif
                  if ( do_LinearBmf ) L_extinction(qm+1) = LFRC_BMie_bulk(1)
               endif
            endif

!  Linearization of the scaling factor

            if ( point_index .ne. 0 .and. wc.eq.1 ) then
               Local_L_aod_scaling(w,1:qm1) = 0.0d0
            else
              do qm = 1, qm1
                 Local_L_aod_scaling(w,qm) = local_aod_scaling(w) * ( (L_extinction(qm)/extinction)        &
                                                         - (L_extinction_ref(qm)/extinction_ref) )
              enddo
            endif
            qm2 = qm1 + 1 ; local_L_aod_scaling(w,qm2:qmt) = 0.0d0

!  Linearization of scattering properties

            qm = 0
            if ( Do_LinearRef) then
               do l = 0, n_scatmoms_w
                  do k = 1, nmuller
                     Local_L_scatmoms(k,l,w,qm+1:qm+2) = LRFE_BMie_expcoeffs(k,l,1:2,1)
                  enddo
               enddo
               Local_L_aerssalbs(w,qm+1:qm+2) = LRFE_BMie_bulk(3,1:2,1) ; qm = qm + 2
            endif
            if ( Do_LinearPSD) then
               do l = 0, n_scatmoms_w
                  do k = 1, nmuller
                     Local_L_scatmoms(k,l,w,qm+1:qm+npsd(1)) = LPSD_BMie_expcoeffs(k,l,1:npsd(1),1)
                  enddo
               enddo
               Local_L_aerssalbs(w,qm+1:qm+npsd(1)) = LPSD_BMie_bulk(3,1:npsd(1),1) ; qm = qm + npsd(1)
            endif
            if ( do_bimodal ) then
               if ( Do_LinearRef) then
                  do l = 0, n_scatmoms_w
                     do k = 1, nmuller
                        Local_L_scatmoms(k,l,w,qm+1:qm+2) = LRFE_BMie_expcoeffs(k,l,1:2,2)
                     enddo
                  enddo
                  Local_L_aerssalbs(w,qm+1:qm+2) = LRFE_BMie_bulk(3,1:2,2) ; qm = qm + 2
               endif
               if ( Do_LinearPSD) then
                  do l = 0, n_scatmoms_w
                     do k = 1, nmuller
                        Local_L_scatmoms(k,l,w,qm+1:qm+npsd(2)) = LPSD_BMie_expcoeffs(k,l,1:npsd(2),2)
                     enddo
                  enddo
                  Local_L_aerssalbs(w,qm+1:qm+npsd(2)) = LPSD_BMie_bulk(3,1:npsd(2),2) ; qm = qm + npsd(2)
               endif
               if ( do_LinearBmf ) then
                  do l = 0, n_scatmoms_w
                     do k = 1, nmuller
                        Local_L_scatmoms(k,l,w,qm1) = LFRC_BMie_expcoeffs(k,l)
                     enddo
                  enddo
                  Local_L_aerssalbs(w,qm1) = LFRC_BMie_bulk(3)
               endif
            endif
            Local_L_scatmoms(1,0,w,1:qm1) = 0.0d0

!  End Jacobians clause

         endif

!  Upgrade

         n_scatmoms = min(n_scatmoms, n_scatmoms_w)

!  Skip to the interpolation section itself

         go to 677   

!  End local saving

      endif

!  FULL CALCULATION (No Interpolation): Set the optical property output
!  ====================================================================

!  (a) Regular Properties
!      ******************

!  Extinction and its scaling factor. All wavelengths.

      if ( point_index .ne. 0 .and. wc.eq.1 ) then
         extinction       = extinction_ref
         aod_scaling(w)   = 1.0d0
      else
         extinction       = BMie_bulk(1)
         aod_scaling(w)   = extinction / extinction_ref
      endif

!  Assign SSAs and expansion coefficients, single/bimodal aerosol type

      aerosol_ssalbs(w) = BMie_bulk(3)
      l = 0
      aerosol_scatmoms(1,0,w) = 1.0d0
      do while (aerosol_scatmoms(1,l,w).gt.momsize_cutoff.and.l.lt.maxaermoms )
         l = l + 1
         aerosol_scatmoms(1,l,w) = Bmie_expcoeffs(1,l)
      enddo
      n_scatmoms_w = l
      do l = 0, n_scatmoms_w
         do k = 2, nmuller
            aerosol_scatmoms(k,l,w) = BMie_expcoeffs(k,l) 
         enddo
      enddo

!  (b) linearized Properties
!      *********************

      if ( do_aer_Jacobians ) then

!  Linearized extinction

         if ( point_index .ne. 0 .and. wc.eq.1 ) then
            L_extinction(1:qm1) = L_extinction_Ref(1:qm1)
         else
            qm = 0
            if ( Do_LinearRef) then
               L_extinction(qm+1:qm+2) = LRFE_BMie_bulk(1,1:2,1) ; qm = qm + 2
            endif
            if ( Do_LinearPSD) then
               L_extinction(qm+1:qm+npsd(1)) = LPSD_BMie_bulk(1,1:npsd(1),1) ; qm = qm + npsd(1)
            endif
            if ( do_bimodal ) then
               if ( Do_LinearRef) then
                  L_extinction(qm+1:qm+2) = LRFE_BMie_bulk(1,1:2,2) ; qm = qm + 2
               endif
               if ( Do_LinearPSD) then
                  L_extinction(qm+1:qm+npsd(2)) = LPSD_BMie_bulk(1,1:npsd(2),2) ; qm = qm + npsd(2)
               endif
               if ( do_LinearBmf ) L_extinction(qm+1) = LFRC_BMie_bulk(1)
            endif
         endif

!  Linearization of the scaling factor

         if ( point_index .ne. 0 .and. wc.eq.1 ) then
            L_aod_scaling(w,1:qm1) = 0.0d0
         else
            do qm = 1, qm1
               L_aod_scaling(w,qm) = aod_scaling(w) * ( (L_extinction(qm)/extinction)        &
                                             - (L_extinction_ref(qm)/extinction_ref) )
            enddo
         endif
         qm2 = qm1 + 1 ; L_aod_scaling(w,qm2:qmt) = 0.0d0

!  Linearization of the scattering properties

         qm = 0
         if ( Do_LinearRef) then
            do l = 0, n_scatmoms_w
               do k = 1, nmuller
                  L_aerosol_scatmoms(k,l,w,qm+1:qm+2) = LRFE_BMie_expcoeffs(k,l,1:2,1)
               enddo
            enddo
            L_aerosol_ssalbs(w,qm+1:qm+2) = LRFE_BMie_bulk(3,1:2,1) ; qm = qm + 2
         endif
         if ( Do_LinearPSD) then
            do l = 0, n_scatmoms_w
               do k = 1, nmuller
                  L_aerosol_scatmoms(k,l,w,qm+1:qm+npsd(1)) = LPSD_BMie_expcoeffs(k,l,1:npsd(1),1)
               enddo
            enddo
            L_aerosol_ssalbs(w,qm+1:qm+npsd(1)) = LPSD_BMie_bulk(3,1:npsd(1),1) ; qm = qm + npsd(1)
         endif
         if ( do_bimodal ) then
            if ( Do_LinearRef) then
               do l = 0, n_scatmoms_w
                  do k = 1, nmuller
                     L_aerosol_scatmoms(k,l,w,qm+1:qm+2) = LRFE_BMie_expcoeffs(k,l,1:2,2)
                  enddo
               enddo
               L_aerosol_ssalbs(w,qm+1:qm+2) = LRFE_BMie_bulk(3,1:2,2) ; qm = qm + 2
            endif
            if ( Do_LinearPSD) then
               do l = 0, n_scatmoms_w
                  do k = 1, nmuller
                     L_aerosol_scatmoms(k,l,w,qm+1:qm+npsd(2)) = LPSD_BMie_expcoeffs(k,l,1:npsd(2),2)
                  enddo
               enddo
               L_aerosol_ssalbs(w,qm+1:qm+npsd(2)) = LPSD_BMie_bulk(3,1:npsd(2),2) ; qm = qm + npsd(2)
            endif
            if ( do_LinearBmf ) then
               do l = 0, n_scatmoms_w
                  do k = 1, nmuller
                     L_aerosol_scatmoms(k,l,w,qm1) = LFRC_BMie_expcoeffs(k,l)
                  enddo
               enddo
               L_aerosol_ssalbs(w,qm1) = LFRC_BMie_bulk(3)
            endif
         endif
         L_aerosol_scatmoms(1,0,w,1:qm1) = 0.0d0

!  End Jacobians clause

      endif

!  Update n_scatmoms

      n_scatmoms = min(n_scatmoms, n_scatmoms_w)

!  Apply scalings to loadings and linearizations

      do n = 1, nlayers
         aerosol_deltau(n,w) = aertau_unscaled(n) * aod_scaling(w)
      enddo
      if ( do_aer_jacobians ) then
         do n = 1, nlayers
            do q = 1, qmt
               L_aerosol_deltau(n,w,q) = L_aertau_unscaled(n,q) *   aod_scaling(w) &
                                         + aertau_unscaled(n)   * L_aod_scaling(w,q)
            enddo
         enddo
      endif

!  debug aerosol optical properties. VERSION TWO only
!      if ( do_iopchecker ) then
!         do n = 1, nlayers
!           if (aerlayerflags(N).and.n.eq.107 ) then
!              write(999,'(i4,1p6e20.10)')n,aerosol_deltau(n,w),aerosol_ssalbs(w)
!              do l = 0, n_scatmoms_w
!                write(999,'(2i5,1p6e20.10)')n,l,(aerosol_scatmoms(k,l,w),k=1,1)
!              enddo
!           endif
!         enddo
!           pause'Reg 999'
!      endif

!  debug aerosol optical properties. VERSION TWO only

!         if ( do_iopchecker ) then
!          if ( do_aer_jacobians ) then
!           do n = 1, nlayers
!            if (aerlayerflags(n).and.n.eq.107 ) then
!              write(777,'(i4,1p6e20.10)')n,aerosol_deltau(n,w),aerosol_ssalbs(w)
!              write(777,'(i4,1p11e20.10)')n,(L_aerosol_deltau(n,w,q),q=1,11)
!              write(777,'(i4,1p11e20.10)')n,(L_aerosol_ssalbs(w,q),q=1,11)
!              do l = 0, n_scatmoms_w
!                write(777,'(2i5,1pe20.10,1p11e15.6)')n,l,aerosol_scatmoms(1,l,w),(l_aerosol_scatmoms(1,l,w,q),q=1,11)
!              enddo
!            endif
!           enddo
!           pause'Lin 777'
!          else
!           do n = 1, nlayers
!            if (aerlayerflags(N).and.n.eq.107 ) then
!              write(888,'(i4,1p6e20.10)')n,aerosol_deltau(n,w),aerosol_ssalbs(w)
!              do l = 0, n_scatmoms_w
!                write(888,'(2i5,1p6e20.10)')n,l,(aerosol_scatmoms(k,l,w),k=1,1)
!              enddo
!            else
!              write(888,'(i4,1p6e20.10)')n,aerosol_deltau(n,w)
!            endif
!           enddo
!           pause'Reg 888'
!          endif
!         endif

!  continuation point for avoiding the Full monochromatic solution

677   continue

!  End wavelength/wavenumber loop

   enddo

!  If done Full Monochromatic solution, return

   if ( .not. interpolate_aerosols ) return

!  INTERPOLATION SECTION
!  =====================

!  Interpolation, wavelength regime
!  --------------------------------

   if ( .not. do_wavnums ) then
     wastart = 1
     do w = 1, nwav

!  Wavelength trawling

       wa = wastart ; trawl = .true.
       do while (trawl)
         if ( wav(w) .ge. aerwav(wa) .and. wav(w) .le.aerwav(wa+1) ) trawl = .false.
       enddo
       wa1 = wa ; wa2 = wa + 1 ; fa1 = ( aerwav(wa2) - wav(w) ) / ( aerwav(wa2) -  aerwav(wa1) ) ; fa2 = 1.0d0 - fa1
       wastart = wa1
       if ( w.lt.nwav) then
          if(wav(w+1).ge.aerwav(wa+1))wastart = wa2
       endif

!  Interpolate regular properties

       aod_scaling(w) = fa1 * local_aod_scaling(wa1) + fa2 * local_aod_scaling(wa2)
       do n = 1, nlayers
           aerosol_deltau(n,w) = aertau_unscaled(n) * aod_scaling(w) 
       enddo
       aerosol_ssalbs(w) = fa1 * local_aerssalbs(wa1) + fa2 * local_aerssalbs(wa2)
       do l = 0, n_scatmoms
         do k = 1, nmuller
            aerosol_scatmoms(k,l,w) = fa1 * local_scatmoms(k,l,wa1) + fa2 * local_scatmoms(k,l,wa2)
         enddo
       enddo
       aerosol_scatmoms(1,0,w) = 1.0d0

!  Interpolate linear properties

      if ( do_aer_Jacobians ) then
         L_aod_scaling(w,1:qmt) = fa1 * local_L_aod_scaling(wa1,1:qmt) + fa2 * local_L_aod_scaling(wa2,1:qmt)
         do n = 1, nlayers
            L_aerosol_deltau(n,w,1:qmt) =   aertau_unscaled(n)       * L_aod_scaling(w,1:qmt) + &
                                          L_aertau_unscaled(n,1:qmt) *   aod_scaling(w)
         enddo
         L_aerosol_ssalbs(w,1:qm1) = fa1 * local_L_aerssalbs(wa1,1:qm1) + fa2 * local_L_aerssalbs(wa2,1:qm1)
         do l = 0, n_scatmoms
           do k = 1, nmuller
             L_aerosol_scatmoms(k,l,w,1:qm1) = fa1 * local_L_scatmoms(k,l,wa1,1:qm1) &
                                             + fa2 * local_L_scatmoms(k,l,wa2,1:qm1)
           enddo
         enddo
         L_aerosol_scatmoms(1,0,w,1:qm1) = 0.0d0
       endif

!  End interpolation

     enddo
   endif

!  Interpolation, wavenumber regime
!  --------------------------------

!   12 August 2013 --> KLUTZY CODE here,,,,,,,,,,Improve it!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

   if ( do_wavnums ) then
     wastart = 1
     do w = 1, nwav

!  Wavenumber Trawling

       wa = wastart ; trawl = .true. ; lam =  1.0d+07/wav(w)
54     continue
       do while (trawl)
         if ( lam .lt. aerwav(wa) ) then
            if ( lam .ge. aerwav(wa+1) ) then
               trawl = .false.
            else if (lam .lt. aerwav(wa+1) ) then
               wa = wa + 1 ; go to 54
            endif
         endif
       enddo
       wa1 = wa ; wa2 = wa + 1 ; fa1 = ( aerwav(wa2) - lam ) / ( aerwav(wa2) -  aerwav(wa1) ) ; fa2 = 1.0d0 - fa1
       wastart = wa1

!  Interpolate regular quantities

       aod_scaling(w) = fa1 * local_aod_scaling(wa1) + fa2 * local_aod_scaling(wa2)
       do n = 1, nlayers
         aerosol_deltau(n,w) = aertau_unscaled(n) * aod_scaling(w)
       enddo
       aerosol_ssalbs(w) = fa1 * local_aerssalbs(wa1) + fa2 * local_aerssalbs(wa2)
       do l = 0, n_scatmoms
         do k = 1, nmuller
            aerosol_scatmoms(k,l,w) = fa1 * local_scatmoms(k,l,wa1) + fa2 * local_scatmoms(k,l,wa2)
         enddo
       enddo
       aerosol_scatmoms(1,0,w) = 1.0d0

!  Interpolate linearized quantities

      if ( do_aer_Jacobians ) then
         L_aod_scaling(w,1:qmt) = fa1 * local_L_aod_scaling(wa1,1:qmt) + fa2 * local_L_aod_scaling(wa2,1:qmt)
         do n = 1, nlayers
            L_aerosol_deltau(n,w,1:qmt) =   aertau_unscaled(n)       * L_aod_scaling(w,1:qmt) + &
                                          L_aertau_unscaled(n,1:qmt) *   aod_scaling(w)
         enddo
         L_aerosol_ssalbs(w,1:qm1) = fa1 * local_L_aerssalbs(wa1,1:qm1) + fa2 * local_L_aerssalbs(wa2,1:qm1)
         do l = 0, n_scatmoms
           do k = 1, nmuller
             L_aerosol_scatmoms(k,l,w,1:qm1) = fa1 * local_L_scatmoms(k,l,wa1,1:qm1) &
                                             + fa2 * local_L_scatmoms(k,l,wa2,1:qm1)
           enddo
         enddo
         L_aerosol_scatmoms(1,0,w,1:qm1) = 0.0d0
       endif

!  End interpolation

     enddo
   endif

!  Finish Mie calculation 

   return

!  Continuation point for doing T-matrix calculation

544 continue

! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
!     T M A T R I X   C a l c u l a t i o n 
! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

!  Division factor (necessary because T-matrix output is single-normalized, except for fraction Jacobian)
!      Have to unravel the single normalization here, in order to re-apply it later !!!!

   if ( do_aer_jacobians ) then
      do qm = 1, qm1 - 1
         normfac(qm) = 1.0d0 / AerBulk_pars(qm)
      enddo
      normfac(qm1) = 1.0d0
   endif

!  Prepare the reference-wavelength Tmatrix Inputs
!  ===============================================

   if ( point_index .eq. 0 ) then

!  Only require extinction coefficient if flagged
!  Set the local Mie program inputs (bulk properties only)

      Do_Expcoeffs     = .FALSE.

!  reference wavelength

      wavelength      = GEMSTOOL_INPUTS%AerLoad%reference_w0
      Tmat_wavelength = wavelength/1000.0d0

!  progress

      if ( do_aer_jacobians ) then
         write(*,*)'Linearized Tmatrix Aerosol calculation, reference wavelength = ', wavelength
      else 
         write(*,*)'Regular    Tmatrix Aerosol calculation, reference wavelength = ', wavelength
      endif

!  BIMODAL CALL, with or without Jacobians

      if ( do_bimodal) then
         if ( do_aer_Jacobians ) then
            call tmat_master_bimodal_PLUS                       &
            ( Do_Expcoeffs, Do_Fmatrix, do_Monodisperse, GEMSTOOL_INPUTS%MieTmat%Do_EqSaSphere,                      & !                                         
              Do_LinearRef, Do_LinearEps, Do_LinearPSD, Do_psd_OldStyle,                                             & ! I
              GEMSTOOL_INPUTS%MieTmat%PSDIndex,         GEMSTOOL_INPUTS%MieTmat%PSDpars,   MonoRadius,               & ! I
              GEMSTOOL_INPUTS%MieTmat%R1,               GEMSTOOL_INPUTS%MieTmat%R2, GEMSTOOL_INPUTS%MieTmat%FixR1R2, & ! I
              GEMSTOOL_INPUTS%MieTmat%bimodal_fraction,                                                              & ! 
              GEMSTOOL_INPUTS%MieTmat%Tmat_Sphtype,     GEMSTOOL_INPUTS%MieTmat%Tmat_nkmax,                          & ! I
              n_Fmatrix_angles,                         GEMSTOOL_INPUTS%MieTmat%Tmat_ndgs,                           & ! I
              GEMSTOOL_INPUTS%MieTmat%Tmat_eps,         GEMSTOOL_INPUTS%MieTmat%Tmat_accuracy,                       & ! I    
              Tmat_wavelength, GEMSTOOL_INPUTS%MieTmat%nreal, GEMSTOOL_INPUTS%MieTmat%nimag,                         & ! I
              BTmat_bulk, BTmat_asymm, BTmat_ncoeffs,     & ! O
              BTmat_expcoeffs, BTmat_Fmatrix,             & ! O
              LPSD_BTmat_bulk, LPSD_BTmat_asymm,          & ! O
              LPSD_BTmat_expcoeffs, LPSD_BTmat_Fmatrix,   & ! O
              LRFE_BTmat_bulk, LRFE_BTmat_asymm,          & ! O
              LRFE_BTmat_expcoeffs, LRFE_BTmat_Fmatrix,   & ! O
              LFRC_BTmat_bulk, LFRC_BTmat_asymm,          & ! O
              LFRC_BTmat_expcoeffs, LFRC_BTmat_Fmatrix,   & ! O
              NLIN, BTmat_dist, LPSD_BTmat_dist,          & ! O
              fail2, istatus, Tmat_message, Tmat_trace, Tmat_trace_2, Tmat_trace_3 )   ! Outputs (status)
         else
            call tmat_master_bimodal                 &
            ( Do_Expcoeffs, Do_Fmatrix, do_Monodisperse,                                                             & ! I
              GEMSTOOL_INPUTS%MieTmat%Do_EqSaSphere,    Do_psd_OldStyle,                                             & ! I
              GEMSTOOL_INPUTS%MieTmat%PSDIndex,         GEMSTOOL_INPUTS%MieTmat%PSDpars,   MonoRadius,               & ! I
              GEMSTOOL_INPUTS%MieTmat%R1,               GEMSTOOL_INPUTS%MieTmat%R2, GEMSTOOL_INPUTS%MieTmat%FixR1R2, & ! I
              GEMSTOOL_INPUTS%MieTmat%bimodal_fraction,                                                              & ! 
              GEMSTOOL_INPUTS%MieTmat%Tmat_Sphtype,     GEMSTOOL_INPUTS%MieTmat%Tmat_nkmax,                          & ! I
              n_Fmatrix_angles,                         GEMSTOOL_INPUTS%MieTmat%Tmat_ndgs,                           & ! I
              GEMSTOOL_INPUTS%MieTmat%Tmat_eps,         GEMSTOOL_INPUTS%MieTmat%Tmat_accuracy,                       & ! I    
              Tmat_wavelength, GEMSTOOL_INPUTS%MieTmat%nreal, GEMSTOOL_INPUTS%MieTmat%nimag,                         & ! I
              BTmat_bulk, BTmat_asymm, BTmat_ncoeffs,                                 & ! O
              BTmat_expcoeffs, BTmat_Fmatrix, BTmat_dist,                             & ! O
              fail2, istatus, Tmat_message, Tmat_trace, Tmat_trace_2, Tmat_trace_3 )    ! O
         endif
      endif

!  SINGLE CALL, with or without Jacobians

      if ( .not. do_bimodal ) then
         Btmat_dist(:,2) = 0.0d0
         if ( do_aer_Jacobians ) then
            call tmat_master_PLUS                    &
            ( Do_Expcoeffs, Do_Fmatrix, do_Monodisperse, GEMSTOOL_INPUTS%MieTmat%Do_EqSaSphere,                      & !                                         
              Do_LinearRef, Do_LinearEps, Do_LinearPSD, Do_psd_OldStyle,                                             & ! I
              GEMSTOOL_INPUTS%MieTmat%PSDIndex(1),      GEMSTOOL_INPUTS%MieTmat%PSDpars(:,1),   MonoRadius,                & ! I
              GEMSTOOL_INPUTS%MieTmat%R1(1),            GEMSTOOL_INPUTS%MieTmat%R2(1), GEMSTOOL_INPUTS%MieTmat%FixR1R2(1), & ! I
              GEMSTOOL_INPUTS%MieTmat%Tmat_Sphtype,     GEMSTOOL_INPUTS%MieTmat%Tmat_nkmax(1),                             & ! I
              n_Fmatrix_angles,                         GEMSTOOL_INPUTS%MieTmat%Tmat_ndgs(1),                              & ! I
              GEMSTOOL_INPUTS%MieTmat%Tmat_eps(1),      GEMSTOOL_INPUTS%MieTmat%Tmat_accuracy,                             & ! I  
              Tmat_wavelength, GEMSTOOL_INPUTS%MieTmat%nreal(1), GEMSTOOL_INPUTS%MieTmat%nimag(1),                         & ! I
              BTmat_bulk, BTmat_asymm, BTmat_ncoeffs, BTmat_expcoeffs, BTmat_Fmatrix,   & ! O
              LPSD_BTmat_bulk(:,:,1), LPSD_BTmat_asymm(:,1),                & ! O
              LPSD_BTmat_expcoeffs(:,:,:,1), LPSD_BTmat_Fmatrix(:,:,:,1),   & ! O
              LRFE_BTmat_bulk(:,:,1), LRFE_BTmat_asymm(:,1),                & ! O
              LRFE_BTmat_expcoeffs(:,:,:,1), LRFE_BTmat_Fmatrix(:,:,:,1),   & ! O
              NLIN, BTmat_dist(:,1), LPSD_BTmat_dist(:,:,1),                & ! O
              fail2, istatus, Tmat_message, Tmat_trace, Tmat_trace_2 )                     ! Outputs 
         else
            call tmat_master                         &
            ( Do_Expcoeffs, Do_Fmatrix, do_Monodisperse,                                                                   & ! I
              GEMSTOOL_INPUTS%MieTmat%Do_EqSaSphere,    Do_psd_OldStyle,                                                   & ! I
              GEMSTOOL_INPUTS%MieTmat%PSDIndex(1),      GEMSTOOL_INPUTS%MieTmat%PSDpars(:,1),   MonoRadius,                & ! I
              GEMSTOOL_INPUTS%MieTmat%R1(1),            GEMSTOOL_INPUTS%MieTmat%R2(1), GEMSTOOL_INPUTS%MieTmat%FixR1R2(1), & ! I
              GEMSTOOL_INPUTS%MieTmat%Tmat_Sphtype,     GEMSTOOL_INPUTS%MieTmat%Tmat_nkmax(1),                             & ! I
              n_Fmatrix_angles,                         GEMSTOOL_INPUTS%MieTmat%Tmat_ndgs(1),                              & ! I
              GEMSTOOL_INPUTS%MieTmat%Tmat_eps(1),      GEMSTOOL_INPUTS%MieTmat%Tmat_accuracy,                             & ! I  
              Tmat_wavelength, GEMSTOOL_INPUTS%MieTmat%nreal(1), GEMSTOOL_INPUTS%MieTmat%nimag(1),                         & ! I
              BTmat_bulk, BTmat_asymm, BTmat_ncoeffs,                   & ! O
              BTmat_expcoeffs, BTmat_Fmatrix, BTmat_dist(:,1),          & ! O
              fail2, istatus, Tmat_message, Tmat_trace, Tmat_trace_2 )    ! O
         endif
      endif

!  Exception handling on everything

      if ( Fail2 ) then  
         Messages_Optical(1) = adjustl(trim(Tmat_message))
         Messages_Optical(2) = adjustl(trim(Tmat_trace))
         Messages_Optical(3) = adjustl(trim(Tmat_trace_2))
         Messages_Optical(4) = 'Single Tmatrix Call'; if ( do_bimodal ) Messages_Optical(4) = adjustl(trim(Tmat_trace_3))
         ctype = 'Regular   ' ; if ( do_aer_Jacobians ) ctype = 'Linearized'
         Messages_optical(5) = 'First call to the '//ctype//' Tmat program in GEMSTOOL_AerProperties_Plus, reference wavelength'
         return
      endif

!  Set the reference quantities and set the distribution characteristics
!    NOTE - linearization Bookkeeping.

      extinction_ref = BTmat_bulk(1) ; qm  = 0
      aerosol_distchars = BTmat_dist
      if ( do_aer_Jacobians ) then
         if ( Do_LinearRef) then
            L_extinction_ref(qm+1:qm+2) = LRFE_BTmat_bulk(1,1:2,1) ; qm = qm + 2
         endif
         if ( Do_LinearEps) then
            L_extinction_ref(qm+1:qm+1) = LRFE_BTmat_bulk(1,3,1) ; qm = qm + 1
         endif
         if ( Do_LinearPSD) then
            L_extinction_ref(qm+1:qm+npsd(1)) = LPSD_BTmat_bulk(1,1:npsd(1),1) ; qm = qm + npsd(1)
         endif
         if ( do_bimodal ) then
            if ( Do_LinearRef) then
               L_extinction_ref(qm+1:qm+2) = LRFE_BTmat_bulk(1,1:2,2) ; qm = qm + 2
            endif
            if ( Do_LinearEps) then
               L_extinction_ref(qm+1:qm+1) = LRFE_BTmat_bulk(1,3,2) ; qm = qm + 1
            endif
            if ( Do_LinearPSD) then
               L_extinction_ref(qm+1:qm+npsd(2)) = LPSD_BTmat_bulk(1,1:npsd(2),2) ; qm = qm + npsd(2)
            endif
            if ( do_LinearBmf ) L_extinction_ref(qm+1) = LFRC_BTmat_bulk(1)
         endif
      endif

!  End Tmatrix reference-wavelength calculation

   endif

!  Prepare General (all-wavelength, all-wavenumber) Tmatrix inputs
!  ===============================================================

!  wavelength loop. First wavelength will be the reference, if in  list.
!  Wavnumber  loop.

   do wc = 1, local_nwav

!  Wavelengths [nm]

      w = wavmask(wc)
      if ( interpolate_aerosols ) then
         wavelength = aerwav(w)
      else
        if ( do_wavnums      ) wavelength = 1.0d+07/wav(w)
        if ( .not.do_wavnums ) wavelength = wav(w)
      endif

!  progress

      if ( do_aer_jacobians ) then
         write(*,*)'Linearized Tmatrix Aerosol calculation, doing Point/wavelength # ',wc, wavelength
      else 
         write(*,*)'Regular    Tmatrix Aerosol calculation, doing Point/wavelength # ',wc, wavelength
      endif

!  wavelength for the Tmatrix code (micron unit)  

      Tmat_wavelength = wavelength/1000.0d0

!  Set the local Tmatrix program inputs (general)

      Do_Expcoeffs     = .TRUE.

!  BIMODAL CALL, with or without Jacobians

      if ( do_bimodal) then
         if ( do_aer_Jacobians ) then
            call tmat_master_bimodal_PLUS                       &
            ( Do_Expcoeffs, Do_Fmatrix, do_Monodisperse, GEMSTOOL_INPUTS%MieTmat%Do_EqSaSphere,                      & !                                         
              Do_LinearRef, Do_LinearEps, Do_LinearPSD, Do_psd_OldStyle,                                             & ! I
              GEMSTOOL_INPUTS%MieTmat%PSDIndex,         GEMSTOOL_INPUTS%MieTmat%PSDpars,   MonoRadius,               & ! I
              GEMSTOOL_INPUTS%MieTmat%R1,               GEMSTOOL_INPUTS%MieTmat%R2, GEMSTOOL_INPUTS%MieTmat%FixR1R2, & ! I
              GEMSTOOL_INPUTS%MieTmat%bimodal_fraction,                                                              & ! 
              GEMSTOOL_INPUTS%MieTmat%Tmat_Sphtype,     GEMSTOOL_INPUTS%MieTmat%Tmat_nkmax,                          & ! I
              n_Fmatrix_angles,                         GEMSTOOL_INPUTS%MieTmat%Tmat_ndgs,                           & ! I
              GEMSTOOL_INPUTS%MieTmat%Tmat_eps,         GEMSTOOL_INPUTS%MieTmat%Tmat_accuracy,                       & ! I    
              Tmat_wavelength, GEMSTOOL_INPUTS%MieTmat%nreal, GEMSTOOL_INPUTS%MieTmat%nimag,                         & ! I
              BTmat_bulk, BTmat_asymm, BTmat_ncoeffs,     & ! O
              BTmat_expcoeffs, BTmat_Fmatrix,             & ! O
              LPSD_BTmat_bulk, LPSD_BTmat_asymm,          & ! O
              LPSD_BTmat_expcoeffs, LPSD_BTmat_Fmatrix,   & ! O
              LRFE_BTmat_bulk, LRFE_BTmat_asymm,          & ! O
              LRFE_BTmat_expcoeffs, LRFE_BTmat_Fmatrix,   & ! O
              LFRC_BTmat_bulk, LFRC_BTmat_asymm,          & ! O
              LFRC_BTmat_expcoeffs, LFRC_BTmat_Fmatrix,   & ! O
              NLIN, BTmat_dist, LPSD_BTmat_dist,          & ! O
              fail2, istatus, Tmat_message, Tmat_trace, Tmat_trace_2, Tmat_trace_3 )   ! Outputs (status)
         else
            call tmat_master_bimodal                 &
            ( Do_Expcoeffs, Do_Fmatrix, do_Monodisperse,                                                             & ! I
              GEMSTOOL_INPUTS%MieTmat%Do_EqSaSphere,    Do_psd_OldStyle,                                             & ! I
              GEMSTOOL_INPUTS%MieTmat%PSDIndex,         GEMSTOOL_INPUTS%MieTmat%PSDpars,   MonoRadius,               & ! I
              GEMSTOOL_INPUTS%MieTmat%R1,               GEMSTOOL_INPUTS%MieTmat%R2, GEMSTOOL_INPUTS%MieTmat%FixR1R2, & ! I
              GEMSTOOL_INPUTS%MieTmat%bimodal_fraction,                                                              & ! 
              GEMSTOOL_INPUTS%MieTmat%Tmat_Sphtype,     GEMSTOOL_INPUTS%MieTmat%Tmat_nkmax,                          & ! I
              n_Fmatrix_angles,                         GEMSTOOL_INPUTS%MieTmat%Tmat_ndgs,                           & ! I
              GEMSTOOL_INPUTS%MieTmat%Tmat_eps,         GEMSTOOL_INPUTS%MieTmat%Tmat_accuracy,                       & ! I    
              Tmat_wavelength, GEMSTOOL_INPUTS%MieTmat%nreal, GEMSTOOL_INPUTS%MieTmat%nimag,                         & ! I
              BTmat_bulk, BTmat_asymm, BTmat_ncoeffs,                                 & ! O
              BTmat_expcoeffs, BTmat_Fmatrix, BTmat_dist,                             & ! O
              fail2, istatus, Tmat_message, Tmat_trace, Tmat_trace_2, Tmat_trace_3 )    ! O
         endif
      endif

!  SINGLE CALL, with or without Jacobians

      if ( .not. do_bimodal ) then
         Btmat_dist(:,2) = 0.0d0
         if ( do_aer_Jacobians ) then
            call tmat_master_PLUS                    &
            ( Do_Expcoeffs, Do_Fmatrix, do_Monodisperse, GEMSTOOL_INPUTS%MieTmat%Do_EqSaSphere,                      & !                                         
              Do_LinearRef, Do_LinearEps, Do_LinearPSD, Do_psd_OldStyle,                                             & ! I
              GEMSTOOL_INPUTS%MieTmat%PSDIndex(1),      GEMSTOOL_INPUTS%MieTmat%PSDpars(:,1),   MonoRadius,                & ! I
              GEMSTOOL_INPUTS%MieTmat%R1(1),            GEMSTOOL_INPUTS%MieTmat%R2(1), GEMSTOOL_INPUTS%MieTmat%FixR1R2(1), & ! I
              GEMSTOOL_INPUTS%MieTmat%Tmat_Sphtype,     GEMSTOOL_INPUTS%MieTmat%Tmat_nkmax(1),                             & ! I
              n_Fmatrix_angles,                         GEMSTOOL_INPUTS%MieTmat%Tmat_ndgs(1),                              & ! I
              GEMSTOOL_INPUTS%MieTmat%Tmat_eps(1),      GEMSTOOL_INPUTS%MieTmat%Tmat_accuracy,                             & ! I  
              Tmat_wavelength, GEMSTOOL_INPUTS%MieTmat%nreal(1), GEMSTOOL_INPUTS%MieTmat%nimag(1),                         & ! I
              BTmat_bulk, BTmat_asymm, BTmat_ncoeffs, BTmat_expcoeffs, BTmat_Fmatrix,   & ! O
              LPSD_BTmat_bulk(:,:,1), LPSD_BTmat_asymm(:,1),                & ! O
              LPSD_BTmat_expcoeffs(:,:,:,1), LPSD_BTmat_Fmatrix(:,:,:,1),   & ! O
              LRFE_BTmat_bulk(:,:,1), LRFE_BTmat_asymm(:,1),                & ! O
              LRFE_BTmat_expcoeffs(:,:,:,1), LRFE_BTmat_Fmatrix(:,:,:,1),   & ! O
              NLIN, BTmat_dist(:,1), LPSD_BTmat_dist(:,:,1),                & ! O
              fail2, istatus, Tmat_message, Tmat_trace, Tmat_trace_2 )                     ! Outputs 
         else
            call tmat_master                         &
            ( Do_Expcoeffs, Do_Fmatrix, do_Monodisperse,                                                                   & ! I
              GEMSTOOL_INPUTS%MieTmat%Do_EqSaSphere,    Do_psd_OldStyle,                                                   & ! I
              GEMSTOOL_INPUTS%MieTmat%PSDIndex(1),      GEMSTOOL_INPUTS%MieTmat%PSDpars(:,1),   MonoRadius,                & ! I
              GEMSTOOL_INPUTS%MieTmat%R1(1),            GEMSTOOL_INPUTS%MieTmat%R2(1), GEMSTOOL_INPUTS%MieTmat%FixR1R2(1), & ! I
              GEMSTOOL_INPUTS%MieTmat%Tmat_Sphtype,     GEMSTOOL_INPUTS%MieTmat%Tmat_nkmax(1),                             & ! I
              n_Fmatrix_angles,                         GEMSTOOL_INPUTS%MieTmat%Tmat_ndgs(1),                              & ! I
              GEMSTOOL_INPUTS%MieTmat%Tmat_eps(1),      GEMSTOOL_INPUTS%MieTmat%Tmat_accuracy,                             & ! I  
              Tmat_wavelength, GEMSTOOL_INPUTS%MieTmat%nreal(1), GEMSTOOL_INPUTS%MieTmat%nimag(1),                         & ! I
              BTmat_bulk, BTmat_asymm, BTmat_ncoeffs,                   & ! O
              BTmat_expcoeffs, BTmat_Fmatrix, BTmat_dist(:,1),          & ! O
              fail2, istatus, Tmat_message, Tmat_trace, Tmat_trace_2 )    ! O
         endif
      endif

!  Exception handling on everything

      if ( Fail2 ) then  
         write(cwav,'(I3)')wc
         Messages_Optical(1) = adjustl(trim(Tmat_message))
         Messages_Optical(2) = adjustl(trim(Tmat_trace))
         Messages_Optical(3) = adjustl(trim(Tmat_trace_2))
         Messages_Optical(4) = 'Single Tmatrix Call'; if ( do_bimodal ) Messages_Optical(4) = adjustl(trim(Tmat_trace_3))
         ctype = 'Regular   ' ; if ( do_aer_Jacobians ) ctype = 'Linearized'
         Messages_optical(5) = &
            'Second call to the '//ctype//' Tmat program in GEMSTOOL_AerProperties_Plus, wavelength/wavenumber # '//cwav
         return
      endif

!  Set the reference quantities, if reference wavelength is in the list.
!   Values for the first (masked) wavelength

      if ( point_index .ne. 0 .and. wc.eq.1 ) then
         extinction_ref = BTmat_bulk(1)
         aerosol_distchars = BTmat_dist
         if ( do_aer_Jacobians ) then
            if ( Do_LinearRef) then
               L_extinction_ref(qm+1:qm+2) = LRFE_BTmat_bulk(1,1:2,1) ; qm = qm + 2
            endif
            if ( Do_LinearEps) then
               L_extinction_ref(qm+1:qm+1) = LRFE_BTmat_bulk(1,3,1) ; qm = qm + 1
            endif
            if ( Do_LinearPSD) then
               L_extinction_ref(qm+1:qm+npsd(1)) = LPSD_BTmat_bulk(1,1:npsd(1),1) ; qm = qm + npsd(1)
            endif
            if ( do_bimodal ) then
               if ( Do_LinearRef) then
                  L_extinction_ref(qm+1:qm+2) = LRFE_BTmat_bulk(1,1:2,2) ; qm = qm + 2
               endif
               if ( Do_LinearEps) then
                  L_extinction_ref(qm+1:qm+1) = LRFE_BTmat_bulk(1,3,2) ; qm = qm + 1
               endif
               if ( Do_LinearPSD) then
                  L_extinction_ref(qm+1:qm+npsd(2)) = LPSD_BTmat_bulk(1,1:npsd(2),2) ; qm = qm + npsd(2)
               endif
               if ( do_LinearBmf ) L_extinction_ref(qm+1) = LFRC_BTmat_bulk(1)
            endif
         endif
      endif

!  INTERPOLATION OPTION, save output to local arrays
!  =================================================

      if ( interpolate_aerosols ) then

!  a. Regular properties
!  *********************

         if ( point_index .ne. 0 .and. wc.eq.1 ) then
            extinction             = extinction_ref
            local_aod_scaling(w)   = 1.0d0
         else
            extinction             = BTmat_bulk(1) 
            local_aod_scaling(w)   = extinction / extinction_ref
         endif
         local_aerssalbs(w)     = BTmat_bulk(3)
         l = 0 ; local_scatmoms(1,0,w) = 1.0d0
         do while (local_scatmoms(1,l,w).gt.momsize_cutoff.and.l.lt.maxaermoms )
            l = l + 1 ; local_scatmoms(1,l,w) = BTmat_expcoeffs(l+1,1)
         enddo
         n_scatmoms_w = l
         do l = 0, n_scatmoms_w
            local_scatmoms(2:nmuller,l,w) = BTmat_expcoeffs(l+1,2:nmuller) 
         enddo

!  b. Linearized properties
!  ************************

         if ( do_aer_Jacobians ) then

!  Linearized extinction

            if ( point_index .ne. 0 .and. wc.eq.1 ) then
               L_extinction(1:qm1) = L_extinction_ref(1:qm1)
            else
               qm = 0
               if ( Do_LinearRef) then
                  L_extinction(qm+1:qm+2) = LRFE_BTmat_bulk(1,1:2,1) ; qm = qm + 2
               endif
               if ( Do_LinearEps) then
                  L_extinction_ref(qm+1:qm+1) = LRFE_BTmat_bulk(1,3,1) ; qm = qm + 1
               endif
               if ( Do_LinearPSD) then
                  L_extinction(qm+1:qm+npsd(1)) = LPSD_BTmat_bulk(1,1:npsd(1),1) ; qm = qm + npsd(1)
               endif
               if ( do_bimodal ) then
                  if ( Do_LinearRef) then
                     L_extinction(qm+1:qm+2) = LRFE_BTmat_bulk(1,1:2,2) ; qm = qm + 2
                  endif
                  if ( Do_LinearEps) then
                     L_extinction_ref(qm+1:qm+1) = LRFE_BTmat_bulk(1,3,2) ; qm = qm + 1
                  endif
                  if ( Do_LinearPSD) then
                     L_extinction(qm+1:qm+npsd(2)) = LPSD_BTmat_bulk(1,1:npsd(2),2) ; qm = qm + npsd(2)
                  endif
                  if ( do_LinearBmf ) L_extinction(qm+1) = LFRC_BTmat_bulk(1)
               endif
            endif

!  Linearization of the scaling factor

            if ( point_index .ne. 0 .and. wc.eq.1 ) then
               Local_L_aod_scaling(w,1:qm1) = 0.0d0
            else
               do qm = 1, qm1
                  Local_L_aod_scaling(w,qm) = Local_aod_scaling(w) * ( (L_extinction(qm)/extinction)        &
                                                                     - (L_extinction_ref(qm)/extinction_ref) )
               enddo
            endif
            qm2 = qm1 + 1 ; local_L_aod_scaling(w,qm2:qmt) = 0.0d0

!  Linearization of scattering properties

            qm = 0
            if ( Do_LinearRef) then
               do l = 0, n_scatmoms_w
                  do k = 1, nmuller
                     Local_L_scatmoms(k,l,w,qm+1:qm+2) = LRFE_BTmat_expcoeffs(k,l+1,1:2,1)
                  enddo
               enddo
               Local_L_aerssalbs(w,qm+1:qm+2) = LRFE_BTmat_bulk(3,1:2,1) ; qm = qm + 2
            endif
            if ( Do_LinearEps) then
               do l = 0, n_scatmoms_w
                  do k = 1, nmuller
                     Local_L_scatmoms(k,l,w,qm+1:qm+1) = LRFE_BTmat_expcoeffs(k,l+1,3,1)
                  enddo
               enddo
               Local_L_aerssalbs(w,qm+1:qm+1) = LRFE_BTmat_bulk(3,3,1) ; qm = qm + 1
            endif
            if ( Do_LinearPSD) then
               do l = 0, n_scatmoms_w
                  do k = 1, nmuller
                     Local_L_scatmoms(k,l,w,qm+1:qm+npsd(1)) = LPSD_BTmat_expcoeffs(k,l+1,1:npsd(1),1)
                  enddo
               enddo
               Local_L_aerssalbs(w,qm+1:qm+npsd(1)) = LPSD_BTmat_bulk(3,1:npsd(1),1) ; qm = qm + npsd(1)
            endif
            if ( do_bimodal ) then
               if ( Do_LinearRef) then
                  do l = 0, n_scatmoms_w
                     do k = 1, nmuller
                        Local_L_scatmoms(k,l,w,qm+1:qm+2) = LRFE_BTmat_expcoeffs(k,l+1,1:2,2)
                     enddo
                  enddo
                  Local_L_aerssalbs(w,qm+1:qm+2) = LRFE_BTmat_bulk(3,1:2,2) ; qm = qm + 2
               endif
               if ( Do_LinearEps) then
                  do l = 0, n_scatmoms_w
                     do k = 1, nmuller
                        Local_L_scatmoms(k,l,w,qm+1:qm+1) = LRFE_BTmat_expcoeffs(k,l+1,3,2)
                     enddo
                  enddo
                  Local_L_aerssalbs(w,qm+1:qm+1) = LRFE_BTmat_bulk(3,3,2) ; qm = qm + 1
               endif
               if ( Do_LinearPSD) then
                  do l = 0, n_scatmoms_w
                     do k = 1, nmuller
                        Local_L_scatmoms(k,l,w,qm+1:qm+npsd(2)) = LPSD_BTmat_expcoeffs(k,l+1,1:npsd(2),2)
                     enddo
                  enddo
                  Local_L_aerssalbs(w,qm+1:qm+npsd(2)) = LPSD_BTmat_bulk(3,1:npsd(2),2) ; qm = qm + npsd(2)
               endif
               if ( Do_LinearBmf ) then
                  do l = 0, n_scatmoms_w
                     do k = 1, nmuller
                        Local_L_scatmoms(k,l,w,qm1) = LFRC_BTmat_expcoeffs(k,l+1)
                     enddo
                  enddo
                  Local_L_aerssalbs(w,qm1) = LFRC_BTmat_bulk(3)
               endif
            endif
            Local_L_scatmoms(1,0,w,1:qm1) = 0.0d0

!  End Jacobians clause

         endif

!  Upgrade

         n_scatmoms = min(n_scatmoms, n_scatmoms_w)

!  Un-normalize optical properties

         if ( do_aer_Jacobians ) then
            do qm = 1, qm1 - 1
               Local_L_aod_scaling(w,qm) = normfac(qm) *  Local_L_aod_scaling(w,qm)
               Local_L_aerssalbs(w,qm) = Local_L_aerssalbs(w,qm) * normfac(qm)
               do l = 0, n_scatmoms
                  do k = 1, nmuller
                     Local_L_scatmoms(k,l,w,qm) = Local_L_scatmoms(k,l,w,qm) * normfac(qm)
                  enddo
               enddo
            enddo
         endif

!  Skip to the interpolation section itself

         go to 678  

!  End local saving

      endif

!  FULL CALCULATION (No Interpolation): Set the optical property output
!  ====================================================================

!  (a) Regular Properties
!      ******************

!  Extinction and its scaling factor. All wavelengths.

      if ( point_index .ne. 0 .and. wc.eq.1 ) then
         extinction       = extinction_ref
         aod_scaling(w)   = 1.0d0
      else
         extinction       = BTmat_bulk(1) 
         aod_scaling(w)   = extinction / extinction_ref
      endif

!  Assign SSAs and expansion coefficients, single/bimodal aerosol type

      aerosol_ssalbs(w) = BTmat_bulk(3)
      l = 0 ; aerosol_scatmoms(1,0,w) = 1.0d0
      do while (aerosol_scatmoms(1,l,w).gt.momsize_cutoff.and.l.lt.maxaermoms )
         l = l + 1
         aerosol_scatmoms(1,l,w) = BTmat_expcoeffs(l+1,1)
      enddo
      n_scatmoms_w = l
      do l = 0, n_scatmoms_w
         aerosol_scatmoms(2:nmuller,l,w) = BTmat_expcoeffs(l+1,2:nmuller) 
      enddo

!  (b) linearized Properties
!      *********************

      if ( do_aer_Jacobians ) then

!  Linearized extinction

         if ( point_index .ne. 0 .and. wc.eq.1 ) then
            L_extinction(1:qm1)       = L_extinction_ref(1:qm1)
         else
            qm = 0
            if ( Do_LinearRef) then
               L_extinction(qm+1:qm+2) = LRFE_BTmat_bulk(1,1:2,1) ; qm = qm + 2
            endif
            if ( Do_LinearEps) then
               L_extinction_ref(qm+1:qm+1) = LRFE_BTmat_bulk(1,3,1) ; qm = qm + 1
            endif
               if ( Do_LinearPSD) then
               L_extinction(qm+1:qm+npsd(1)) = LPSD_BTmat_bulk(1,1:npsd(1),1) ; qm = qm + npsd(1)
            endif
            if ( do_bimodal ) then
               if ( Do_LinearRef) then
                  L_extinction(qm+1:qm+2) = LRFE_BTmat_bulk(1,1:2,2) ; qm = qm + 2
               endif
               if ( Do_LinearEps) then
                  L_extinction_ref(qm+1:qm+1) = LRFE_BTmat_bulk(1,3,2) ; qm = qm + 1
               endif
               if ( Do_LinearPSD) then
                  L_extinction(qm+1:qm+npsd(2)) = LPSD_BTmat_bulk(1,1:npsd(2),2) ; qm = qm + npsd(2)
               endif
               if ( Do_LinearBmf ) L_extinction(qm+1) = LFRC_BTmat_bulk(1)
            endif
         endif

!  Linearization of the scaling factor

         if ( point_index .ne. 0 .and. wc.eq.1 ) then
            L_aod_scaling(w,1:qm1) = 0.0d0
         else
            do qm = 1, qm1
               L_aod_scaling(w,qm) = aod_scaling(w) * ( (L_extinction(qm)/extinction)        &
                                              - (L_extinction_ref(qm)/extinction_ref) )
            enddo
         endif
         qm2 = qm1 + 1 ; L_aod_scaling(w,qm2:qmt) = 0.0d0

!  Linearization of the scattering properties

         qm = 0
         if ( Do_LinearRef) then
            do l = 0, n_scatmoms_w
               do k = 1, nmuller
                  L_aerosol_scatmoms(k,l,w,qm+1:qm+2) = LRFE_BTmat_expcoeffs(k,l+1,1:2,1)
               enddo
            enddo
            L_aerosol_ssalbs(w,qm+1:qm+2) = LRFE_BTmat_bulk(3,1:2,1) ; qm = qm + 2
         endif
         if ( Do_LinearEps) then
            do l = 0, n_scatmoms_w
               do k = 1, nmuller
                  L_aerosol_scatmoms(k,l,w,qm+1:qm+1) = LRFE_BTmat_expcoeffs(k,l+1,3,1)
               enddo
            enddo
            L_aerosol_ssalbs(w,qm+1:qm+1) = LRFE_BTmat_bulk(3,3,1) ; qm = qm + 1
         endif
         if ( Do_LinearPSD) then
            do l = 0, n_scatmoms_w
               do k = 1, nmuller
                  L_aerosol_scatmoms(k,l,w,qm+1:qm+npsd(1)) = LPSD_BTmat_expcoeffs(k,l+1,1:npsd(1),1)
               enddo
            enddo
            L_aerosol_ssalbs(w,qm+1:qm+npsd(1)) = LPSD_BTmat_bulk(3,1:npsd(1),1) ; qm = qm + npsd(1)
         endif
         if ( do_bimodal ) then
            if ( Do_LinearRef) then
               do l = 0, n_scatmoms_w
                  do k = 1, nmuller
                     L_aerosol_scatmoms(k,l,w,qm+1:qm+2) = LRFE_BTmat_expcoeffs(k,l+1,1:2,2)
                  enddo
               enddo
               L_aerosol_ssalbs(w,qm+1:qm+2) = LRFE_BTmat_bulk(3,1:2,2) ; qm = qm + 2
            endif
            if ( Do_LinearEps) then
               do l = 0, n_scatmoms_w
                  do k = 1, nmuller
                     L_aerosol_scatmoms(k,l,w,qm+1:qm+1) = LRFE_BTmat_expcoeffs(k,l+1,3,2)
                  enddo
               enddo
               L_aerosol_ssalbs(w,qm+1:qm+1) = LRFE_BTmat_bulk(3,3,2) ; qm = qm + 1
            endif
            if ( Do_LinearPSD) then
               do l = 0, n_scatmoms_w
                  do k = 1, nmuller
                     L_aerosol_scatmoms(k,l,w,qm+1:qm+npsd(2)) = LPSD_BTmat_expcoeffs(k,l+1,1:npsd(2),2)
                  enddo
               enddo
               L_aerosol_ssalbs(w,qm+1:qm+npsd(2)) = LPSD_BTmat_bulk(3,1:npsd(2),2) ; qm = qm + npsd(2)
            endif
            if ( Do_LinearBmf )  then
               do l = 0, n_scatmoms_w
                  do k = 1, nmuller
                     L_aerosol_scatmoms(k,l,w,qm1) = LFRC_BTmat_expcoeffs(k,l+1)
                  enddo
               enddo
               L_aerosol_ssalbs(w,qm1) = LFRC_BTmat_bulk(3)
            endif
         endif
         L_aerosol_scatmoms(1,0,w,1:qm1) = 0.0d0

!  End Jacobians clause

      endif

!  Update n_scatmoms

      n_scatmoms = min(n_scatmoms, n_scatmoms_w)

!  Un-normalize optical properties

      if ( do_aer_Jacobians ) then
         do qm = 1, qm1 - 1
            L_aod_scaling(w,qm) = normfac(qm) *  L_aod_scaling(w,qm)
            L_aerosol_ssalbs(w,qm) = L_aerosol_ssalbs(w,qm) * normfac(qm)
            do l = 0, n_scatmoms
               do k = 1, nmuller
                  L_aerosol_scatmoms(k,l,w,qm) = L_aerosol_scatmoms(k,l,w,qm) * normfac(qm)
               enddo
            enddo
         enddo
      endif

!  Apply scalings to loadings and linearizations

      do n = 1, nlayers
         aerosol_deltau(n,w) = aertau_unscaled(n) * aod_scaling(w)
      enddo
      if ( do_aer_jacobians ) then
         do n = 1, nlayers
            do q = 1, qmt
               L_aerosol_deltau(n,w,q) = L_aertau_unscaled(n,q) *   aod_scaling(w) &
                                         + aertau_unscaled(n)   * L_aod_scaling(w,q)
            enddo
         enddo
      endif

!  debug aerosol optical properties. VERSION TWO only
!      if ( do_iopchecker ) then
!         do n = 1, nlayers
!           if (aerlayerflags(N).and.n.eq.107 ) then
!              write(999,'(i4,1p6e20.10)')n,aerosol_deltau(n,w),aerosol_ssalbs(w)
!              do l = 0, n_scatmoms_w
!                write(999,'(2i5,1p6e20.10)')n,l,(aerosol_scatmoms(k,l,w),k=1,1)
!              enddo
!           endif
!         enddo
!           pause'Reg 999'
!      endif

!  debug aerosol optical properties. VERSION TWO only

!         if ( do_iopchecker ) then
!          if ( do_aer_jacobians ) then
!           do n = 1, nlayers
!            if (aerlayerflags(n).and.n.eq.107 ) then
!              write(777,'(i4,1p6e20.10)')n,aerosol_deltau(n,w),aerosol_ssalbs(w)
!              write(777,'(i4,1p11e20.10)')n,(L_aerosol_deltau(n,w,q),q=1,11)
!              write(777,'(i4,1p11e20.10)')n,(L_aerosol_ssalbs(w,q),q=1,11)
!              do l = 0, n_scatmoms_w
!                write(777,'(2i5,1pe20.10,1p11e15.6)')n,l,aerosol_scatmoms(1,l,w),(l_aerosol_scatmoms(1,l,w,q),q=1,11)
!              enddo
!            endif
!           enddo
!           pause'Lin 777'
!          else
!           do n = 1, nlayers
!            if (aerlayerflags(N).and.n.eq.107 ) then
!              write(888,'(i4,1p6e20.10)')n,aerosol_deltau(n,w),aerosol_ssalbs(w)
!              do l = 0, n_scatmoms_w
!                write(888,'(2i5,1p6e20.10)')n,l,(aerosol_scatmoms(k,l,w),k=1,1)
!              enddo
!            else
!              write(888,'(i4,1p6e20.10)')n,aerosol_deltau(n,w)
!            endif
!           enddo
!           pause'Reg 888'
!          endif
!         endif

!  continuation point for avoiding the Full monochromatic solution

678   continue

!  End wavelength/wavenumber loop

   enddo

!  If done Full Monochromatic solution, return

   if ( .not. interpolate_aerosols ) return

!  INTERPOLATION SECTION
!  =====================

!  Interpolation, wavelength regime
!  --------------------------------

   if ( .not. do_wavnums ) then
     wastart = 1
     do w = 1, nwav

!  Wavelength trawling

       wa = wastart ; trawl = .true.
       do while (trawl)
         if ( wav(w) .ge. aerwav(wa) .and. wav(w) .le.aerwav(wa+1) ) trawl = .false.
       enddo
       wa1 = wa ; wa2 = wa + 1 ; fa1 = ( aerwav(wa2) - wav(w) ) / ( aerwav(wa2) -  aerwav(wa1) ) ; fa2 = 1.0d0 - fa1
       wastart = wa1
       if ( w.lt.nwav) then
          if(wav(w+1).ge.aerwav(wa+1))wastart = wa2
       endif

!  Interpolate regular properties

       aod_scaling(w) = fa1 * local_aod_scaling(wa1) + fa2 * local_aod_scaling(wa2)
       do n = 1, nlayers
         aerosol_deltau(n,w) = aertau_unscaled(n) * aod_scaling(w) 
       enddo
       aerosol_ssalbs(w) = fa1 * local_aerssalbs(wa1) + fa2 * local_aerssalbs(wa2)
       do l = 0, n_scatmoms
         do k = 1, nmuller
            aerosol_scatmoms(k,l,w) = fa1 * local_scatmoms(k,l,wa1) + fa2 * local_scatmoms(k,l,wa2)
         enddo
       enddo
       aerosol_scatmoms(1,0,w) = 1.0d0

!  Interpolate linear properties

      if ( do_aer_Jacobians ) then
         L_aod_scaling(w,1:qmt) = fa1 * local_L_aod_scaling(wa1,1:qmt) + fa2 * local_L_aod_scaling(wa2,1:qmt)
         do n = 1, nlayers
            L_aerosol_deltau(n,w,1:qmt) =   aertau_unscaled(n)       * L_aod_scaling(w,1:qmt) + &
                                          L_aertau_unscaled(n,1:qmt) *   aod_scaling(w)
         enddo
         L_aerosol_ssalbs(w,1:qm1) = fa1 * local_L_aerssalbs(wa1,1:qm1) + fa2 * local_L_aerssalbs(wa2,1:qm1)
         do l = 0, n_scatmoms
           do k = 1, nmuller
             L_aerosol_scatmoms(k,l,w,1:qm1) = fa1 * local_L_scatmoms(k,l,wa1,1:qm1) &
                                             + fa2 * local_L_scatmoms(k,l,wa2,1:qm1)
           enddo
         enddo
         L_aerosol_scatmoms(1,0,w,1:qm1) = 0.0d0
       endif

!  End interpolation

     enddo
   endif

!  Interpolation, wavenumber regime
!  --------------------------------

!   12 August 2013 --> KLUTZY CODE here,,,,,,,,,,Improve it!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

   if ( do_wavnums ) then
     wastart = 1
     do w = 1, nwav

!  Wavenumber Trawling

       wa = wastart ; trawl = .true. ; lam =  1.0d+07/wav(w)
55     continue
       do while (trawl)
         if ( lam .lt. aerwav(wa) ) then
            if ( lam .ge. aerwav(wa+1) ) then
               trawl = .false.
            else if (lam .lt. aerwav(wa+1) ) then
               wa = wa + 1 ; go to 55
            endif
         endif
       enddo
       wa1 = wa ; wa2 = wa + 1 ; fa1 = ( aerwav(wa2) - lam ) / ( aerwav(wa2) -  aerwav(wa1) ) ; fa2 = 1.0d0 - fa1
       wastart = wa1

!  Interpolate regular quantities

       aod_scaling(w) = fa1 * local_aod_scaling(wa1) + fa2 * local_aod_scaling(wa2)
       do n = 1, nlayers
         aerosol_deltau(n,w) = aertau_unscaled(n) * aod_scaling(w)
       enddo
       aerosol_ssalbs(w) = fa1 * local_aerssalbs(wa1) + fa2 * local_aerssalbs(wa2)
       do l = 0, n_scatmoms
         do k = 1, nmuller
            aerosol_scatmoms(k,l,w) = fa1 * local_scatmoms(k,l,wa1) + fa2 * local_scatmoms(k,l,wa2)
         enddo
       enddo
       aerosol_scatmoms(1,0,w) = 1.0d0

!  Interpolate linearized quantities

      if ( do_aer_Jacobians ) then
         L_aod_scaling(w,1:qmt) = fa1 * local_L_aod_scaling(wa1,1:qmt) + fa2 * local_L_aod_scaling(wa2,1:qmt)
         do n = 1, nlayers
            L_aerosol_deltau(n,w,1:qmt) =   aertau_unscaled(n)       * L_aod_scaling(w,1:qmt) + &
                                          L_aertau_unscaled(n,1:qmt) *   aod_scaling(w)
         enddo
         L_aerosol_ssalbs(w,1:qm1) = fa1 * local_L_aerssalbs(wa1,1:qm1) + fa2 * local_L_aerssalbs(wa2,1:qm1)
         do l = 0, n_scatmoms
           do k = 1, nmuller
             L_aerosol_scatmoms(k,l,w,1:qm1) = fa1 * local_L_scatmoms(k,l,wa1,1:qm1) &
                                             + fa2 * local_L_scatmoms(k,l,wa2,1:qm1)
           enddo
         enddo
         L_aerosol_scatmoms(1,0,w,1:qm1) = 0.0d0
       endif

!  End interpolation

     enddo
   endif

!  Finish T-matrix calculation 

   return

end subroutine GEMSTOOL_AER_PROPERTIES_PLUS

!  End module

end Module GEMSTOOL_AerProperties_Plus_m

